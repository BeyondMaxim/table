{
    {
index: 1,
ViewName: "FMSV_COLLECTION_HEADER_FOR_EXCEPTION_REPORT",
MigQuery:"SELECT 
        UPPER(fch.col_refid) AS COL_REFID,
        UPPER(fpd.pa_refid) AS PA_REFID,
        UPPER(fpd.inst_pa_refid) AS INST_PA_REFID,
        UPPER(fch.inst_pa_refid) AS PARENT_INST,
        UPPER(fch.amount_recieved) AS AMOUNT_RECIEVED,
        UPPER(fch.collection_date) AS COLLECTION_DATE,
        UPPER(fch.gst_applicable) AS GST_APPLICABLE,
        UPPER(fch.gst_percent) AS GST_PERCENT,
        UPPER(fch.gst_amount) AS GST_AMOUNT,
        UPPER(fch.interest_percent) AS INTEREST_PERCENT,
        UPPER(fch.interest_amount) AS INTEREST_AMOUNT,
        UPPER(fch.payable_amount) AS PAYABLE_AMOUNT,
        UPPER(fch.reciept_number) AS RECIEPT_NUMBER,
        UPPER(fch.created_by) AS CREATED_BY,
        UPPER(fch.created_date) AS CREATED_DATE,
        UPPER(fch.updated_by) AS UPDATED_BY,
        UPPER(fch.updated_date) AS UPDATED_DATE,
        UPPER(fch.is_void) AS IS_VOID,
        UPPER(fch.remarks) AS REMARKS,
        UPPER(fch.payer_rs_refid) AS PAYER_RS_REFID,
        UPPER(fch.gst_inclusive) AS GST_INCLUSIVE,
        UPPER(fpd.due_amount) AS DUE_AMOUNT
        FROM 
            sqldb.fms_csv.fms_pa_collection_map AS map 
        INNER JOIN 
            sqldb.fms_csv.fms_collection_header AS fch ON fch.col_refid = map.col_refid
        LEFT OUTER JOIN 
            sqldb.fms_csv.fms_pa_details AS fpd ON map.inst_pa_refid = fpd.inst_pa_refid;"

    }

{
index: 2,
ViewName: "FMSV_COLLECTION_DETAILS_EDC_FOR_EXCEPTION_REPORT",
MigQuery:"SELECT FCH.INST_PA_REFID,
    SUM(FCD.PAYMENT_AMOUNT) AS PAID_AMOUNT,
    MAX(FCH.RECIEPT_NUMBER) AS RECIEPT_NUMBER,
    MAX(FCH.COLLECTION_DATE) AS COLLECTION_DATE,
    MAX(FCH.COL_REFID) AS COL_REFID
FROM FMSV_COLLECTION_HEADER_FOR_EXCEPTION_REPORT FCH
INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCD.COL_REFID
WHERE ISNULL(IS_VOID,'N') != 'Y'
AND ISNULL(IS_FAILED,'N') != 'Y'
GROUP BY INST_PA_REFID;"
}

{
index: 3,
ViewName: "FMSV_EXCEPTIONAL_INF_COLLECTIONS_TEST",
MigQuery:"SELECT FCH.INST_PA_REFID, FPH.PAYMENT_TYPE,
    FRD.RS_NAME, FRD.RS_ID_NUMBER, FCH.RECIEPT_NUMBER,
    FCD.PAYMENT_MODE, FCD.PAYMENT_AMOUNT,
    FCH.DUE_AMOUNT,
    FCDE.PAID_AMOUNT AS TOTAL_PAID_AMOUNT,
    FCH.COLLECTION_DATE, FCH.CREATED_DATE AS TRANSACTION_DATE,
    CONVERT(VARCHAR, FCH.CREATED_DATE, 103) AS PAYMENT_DATE,
    FORMAT(FCH.CREATED_DATE, 'hh:mm tt') AS PAYMENT_TIME,
    CONVERT(VARCHAR, FCH.CREATED_DATE, 108) AS PAYMENT_TIME_24HR,
    ISNULL(FCD_CASE.SOURCE_SYSTEM, ISNULL(FPD.SOURCE_SYSTEM,'FMS')) AS SOURCE_SYSTEM,
    FCH.COL_REFID AS COL_REFID
FROM FMSV_COLLECTION_HEADER FCH
INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FCH.PAYER_RS_REFID
INNER JOIN FMSV_COLLECTION_DETAILS_EDC FCDE ON FCDE.INST_PA_REFID = FCH.INST_PA_REFID
INNER JOIN FMS_PA_HEADER FPH ON FPH.PA_REFID = FCH.PA_REFID
INNER JOIN FMS_PA_DETAILS FPD ON FPD.INST_PA_REFID = FCH.INST_PA_REFID
LEFT OUTER JOIN FMS_CASE_DETAILS FCD_CASE ON FPH.CASE_REFID = FCD_CASE.CASE_REFID
WHERE ISNULL(FPH.STATUS,'A') NOT IN ('I','D')
AND FCD.PAYMENT_MODE IN ('eNets','AXS','PAYNOW');"
}
}
{
index:4,
ViewName : "FMSV_EXCEPTIONAL_INF_COLLECTIONS",
MigQuery: "SELECT FCH.PA_REFID AS PA_REFID, FCH.INST_PA_REFID AS INST_PA_REFID, FPH.PAYMENT_TYPE,
    FRD.RS_NAME, FRD.RS_ID_NUMBER,FCH.RECIEPT_NUMBER,
    FCD.PAYMENT_MODE, FCD.PAYMENT_AMOUNT,
    FCH.DUE_AMOUNT,
    FCDE.PAID_AMOUNT AS TOTAL_PAID_AMOUNT,
    FCH.COLLECTION_DATE, FCH.CREATED_DATE AS TRANSACTION_DATE,  
    CONVERT(VARCHAR, FCH.CREATED_DATE, 103) AS PAYMENT_DATE,
    FORMAT(FCH.CREATED_DATE, 'hh:mm tt') AS PAYMENT_TIME, 
    CONVERT(VARCHAR, FCH.CREATED_DATE, 108) AS PAYMENT_TIME_24HR,
    ISNULL(FCD_CASE.SOURCE_SYSTEM, ISNULL(FPD.SOURCE_SYSTEM,'FMS')) AS SOURCE_SYSTEM,
    FCH.COL_REFID AS COL_REFID, FCD.LINE_ID AS LINE_ID
  FROM FMSV_COLLECTION_HEADER FCH
  INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
  INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FCH.PAYER_RS_REFID
  INNER JOIN FMSV_COLLECTION_DETAILS_EDC FCDE ON FCDE.INST_PA_REFID = FCH.INST_PA_REFID
  INNER JOIN FMS_PA_HEADER FPH ON FPH.PA_REFID = FCH.PA_REFID
  INNER JOIN FMS_PA_DETAILS FPD ON FPD.INST_PA_REFID = FCH.INST_PA_REFID
  LEFT OUTER JOIN FMS_CASE_DETAILS FCD_CASE ON FPH.CASE_REFID = FCD_CASE.CASE_REFID
  WHERE ISNULL(FPH.STATUS,'A') NOT IN ('I','D')
  AND FCD.PAYMENT_MODE IN ('eNets','AXS','PAYNOW');"
}

{
index:5,
ViewName : "FMSV_BAIL_REFUND_ORDER_SUMMARY_TEMP",
MigQuery:"SELECT PA_REFID, NFS_VOUCHER_NO,
    SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT,
    SUM(FORFEIT_AMOUNT) AS FORFEIT_AMOUNT,
    SUM(REFUND_AMOUNT) AS REFUND_AMOUNT,
    MAX(CREATED_DATE) AS CREATED_DATE,
    MAX(NFS_VOUCHER_NO) AS NFS_VOUCHER_NO,
    MAX(JAV_VOUCHER_NO) AS JAV_VOUCHER_NO
FROM FMS_REFUND_ORDER_DETAILS
WHERE ISNULL(ACTIVE_INDICATOR,'Y') != 'N' AND ISNULL(BAIL_TYPE,'CASH') = 'CASH'
GROUP BY PA_REFID, NFS_VOUCHER_NO;"
}

{
index: 6,
ViewName : "FMSV_EXCEPTIONAL_INF_COLLECTIONS_PAYMENT_DIFFERENCE",
MigQuery:"SELECT PA_REFID, INST_PA_REFID, PAYMENT_TYPE, RS_NAME, RS_ID_NUMBER, RECIEPT_NUMBER, PAYMENT_MODE,
   PAYMENT_AMOUNT, DUE_AMOUNT, TOTAL_PAID_AMOUNT, COLLECTION_DATE, TRANSACTION_DATE,
   PAYMENT_DATE, PAYMENT_TIME, PAYMENT_TIME_24HR, SOURCE_SYSTEM, COL_REFID
   FROM FMSV_EXCEPTIONAL_INF_COLLECTIONS
  WHERE  TOTAL_PAID_AMOUNT != DUE_AMOUNT;"
}

{
index: 7,
ViewName : "FMSV_EXCEPTIONAL_INF_COLLECTIONS_DUPLICATE_PAYMENTS",
MigQuery:"SELECT DISTINCT FEIC1.PA_REFID, FEIC1.INST_PA_REFID, FEIC1.PAYMENT_TYPE, FEIC1.RS_NAME, FEIC1.RS_ID_NUMBER, FEIC1.RECIEPT_NUMBER, FEIC1.PAYMENT_MODE,
   FEIC1.PAYMENT_AMOUNT, FEIC1.DUE_AMOUNT, FEIC1.TOTAL_PAID_AMOUNT, FEIC1.COLLECTION_DATE, FEIC1.TRANSACTION_DATE,
   FEIC1.PAYMENT_DATE, FEIC1.PAYMENT_TIME, FEIC1.PAYMENT_TIME_24HR, FEIC1.SOURCE_SYSTEM, FEIC1.COL_REFID
FROM FMSV_EXCEPTIONAL_INF_COLLECTIONS FEIC1 
WHERE FEIC1.RECIEPT_NUMBER IN (
   SELECT FEIC2.RECIEPT_NUMBER 
   FROM FMSV_EXCEPTIONAL_INF_COLLECTIONS FEIC2 
   GROUP BY FEIC2.INST_PA_REFID, FEIC2.RECIEPT_NUMBER, FEIC2.TOTAL_PAID_AMOUNT, FEIC2.LINE_ID
   HAVING COUNT(*) > 1);"
}

{
index:8,
ViewName : "FMSV_EXCEPTIONAL_INF_COLLECTIONS_UNTRACKED_PAYMENTS",
MigQuery:"SELECT FCH.PA_REFID AS PA_REFID, FCH.INST_PA_REFID AS INST_PA_REFID, '' AS PAYMENT_TYPE,
    FRD.RS_NAME, FRD.RS_ID_NUMBER, FCH.RECIEPT_NUMBER,
    FCD.PAYMENT_MODE, FCD.PAYMENT_AMOUNT,
    FPD.DUE_AMOUNT AS DUE_AMOUNT,
    FCDE.PAID_AMOUNT AS TOTAL_PAID_AMOUNT,
    FCH.COLLECTION_DATE, FCH.CREATED_DATE AS TRANSACTION_DATE,  
    CONVERT(VARCHAR, FCH.CREATED_DATE, 103) AS PAYMENT_DATE,
    FORMAT(FCH.CREATED_DATE, 'hh:mm:ss tt') AS PAYMENT_TIME, 
    CONVERT(VARCHAR, FCH.CREATED_DATE, 108) AS PAYMENT_TIME_24HR,
    ISNULL(FPD.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM,
    FCH.COL_REFID AS COL_REFID
FROM FMS_COLLECTION_HEADER FCH
INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
INNER JOIN FMSV_COLLECTION_DETAILS_EDC_UNTRACKED_PAYMENTS FCDE ON FCDE.INST_PA_REFID = FCH.INST_PA_REFID
LEFT OUTER JOIN FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FCH.PAYER_RS_REFID
LEFT OUTER JOIN FMS_PA_DETAILS FPD ON FCH.INST_PA_REFID = FPD.INST_PA_REFID
WHERE FCD.PAYMENT_MODE IN ('eNets', 'AXS', 'PAYNOW') AND FCH.PA_REFID NOT IN (SELECT PA_REFID FROM FMS_PA_HEADER);"
}

{
index: 9,
ViewName : "FMSV_COLLECTION_DETAILS_EDC_UNTRACKED_PAYMENTS",
MigQuery: "SELECT INST_PA_REFID,
    SUM(PAYMENT_AMOUNT) AS PAID_AMOUNT,
    MAX(RECIEPT_NUMBER) AS RECIEPT_NUMBER,
    MAX(COLLECTION_DATE) AS COLLECTION_DATE,
    MAX(FCH.COL_REFID) AS COL_REFID
FROM FMS_COLLECTION_HEADER FCH
INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCD.COL_REFID
WHERE ISNULL(IS_VOID, 'N') != 'Y'
AND ISNULL(IS_FAILED, 'N') != 'Y'
GROUP BY INST_PA_REFID;"
}

{

index: 10,
ViewName : "FMSV_COLLECTION_RECORDS_UPDATE_DETAILS",
MigQuery : "SELECT INST_PA_REFID,SUM(PAYMENT_AMOUNT) PAID_AMOUNT,MAX(RECIEPT_NUMBER) RECIEPT_NUMBER  
,MAX(COLLECTION_DATE)COLLECTION_DATE FROM FMSV_COLLECTION_HEADER FCH   
INNER JOIN FMS_COLLECTION_DETAILS  FCD ON FCH.COL_REFID=FCD.COL_REFID   
WHERE ISNULL(IS_VOID, 'N') != 'Y' GROUP BY INST_PA_REFID"
}

{
index:11,
ViewName : "FMS_NC_EMPLOYEE_MASTER",
MigQuery : "SELECT DISTINCT A.ALLOWANCE_TYPE,B.EMP_NRIC AS EMP_ID,B.EMP_NAME,A.DEPARTMENT,A.STAFF_TYPE AS EMP_TYPE,B.STAFF_TYPE AS EMPLOYER 
FROM FMS_NCA_HEADER A 
INNER JOIN FMS_NCA_LINE_DETAILS B ON A.NC_REFID=B.NC_REFID;"

}
{
index:12,
ViewName : "FMSV_ACL_PAGE_MAP",
MigQuery:"SELECT ACL_GROUP,ACL_NAME,E.NAV_NAME AS MODULE, D.NAV_NAME AS CATEGORY,C.NAV_NAME AS PAGE,A.ACL_REFID,C.NAV_REFID,A.DISPLAY_ORDER 
FROM FMS_ACL_MASTER A 
INNER JOIN FMS_ACL_DETAILS B ON A.ACL_REFID=B.ACL_REFID
INNER JOIN FMS_NAV_MASTER C ON B.MAP_REFID=C.NAV_REFID 
INNER JOIN FMS_NAV_MASTER D ON C.PARENT_REF_ID=D.NAV_REFID
INNER JOIN FMS_NAV_MASTER E ON D.PARENT_REF_ID=E.NAV_REFID
WHERE C.NAV_TYPE='P'"

}

{
index:13,
ViewName : "FMSV_ACS_PART_COLLECTION_DTLS",
MigQuery:"SELECT INST_PA_REFID, FCD.COL_REFID, PAYMENT_MODE, BANK_CODE, BANK_REFERENCE,PAYMENT_AMOUNT,
  BANK_RESPONSE, IS_VENDOR_BANK, FCD.REMARKS, RECIEPT_NUMBER, COLLECTION_DATE   
  FROM FMS_COLLECTION_HEADER FCH
  INNER JOIN FMSV_COLLECTION_HEADER_FILTER FCF ON FCF.COL_REFID = FCH.COL_REFID
  INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID =FCD.COL_REFID
  WHERE  RECIEPT_NUMBER LIKE ('%PART%') AND ISNULL(IS_VOID, 'N') NOT IN ('Y', 'R', 'T') AND ISNULL(IS_FAILED, 'N') != 'Y';"
}

{

index: 14,
ViewName : "FMSV_ACS_RECON_REPORT",

MigQuery:"SELECT 

  --ACS--

STG.RECON_REFID, STG.PAYMENT_REFERENCE_NUMBERS AS ACS_REFERENCE_NO, STG.PAYMENT_TYPE AS ACS_PAYMENT_TYPE, STG.RECEIPT_NUMBER AS ACS_RECEIPT_NUMBER,
  STG.PAYMENT_MODE AS ACS_PAYMENT_MODE, STG.TRANSACTION_AMOUNT AS ACS_TRANSACTION_AMOUNT, STG.CASH_COUNTERID AS ACS_CASH_COUNTERID, 
  STG.TRANSACTION_DATETIME AS ACS_TRANSACTION_DATETIME , STG.IS_VOID AS ACS_IS_VOID,
-- FMS--
  FCD.PA_REFID, FCD.PAYMENT_TYPE, FCD.RECIEPT_NUMBER, FCD.PAYMENT_MODE, FCD.PAYMENT_AMOUNT, FCD.CASHIER, FCD.TRANSACTION_DATETIME, FCD.IS_VOID
FROM FMS_ACS_RECON_INPUTS_STG STG
LEFT OUTER JOIN FMSV_RECON_COLLECTION_DETAILS FCD ON FCD.RECIEPT_NUMBER = STG.RECEIPT_NUMBER 
--AND FCD.PAYMENT_MODE = STG.PAYMENT_MODE -- Not required
AND FCD.LINE_ID = STG.LINE_NUMBER
WHERE STG.STATUS = 'A'  AND STG.RECORD_INDICATOR = 'L' ORDER BY STG.RECEIPT_NUMBER, STG.LINE_NUMBER, STG.PAYMENT_MODE ASC;"

}

{

index:15,
ViewName : "FMSV_ACS_RECON_REPORT_BKP",
MigQuery:"SELECT 
  --ACS--
  STG.PAYMENT_REFERENCE_NUMBERS AS ACS_REFERENCE_NO, STG.PAYMENT_TYPE AS ACS_PAYMENT_TYPE, STG.RECEIPT_NUMBER AS ACS_RECEIPT_NUMBER,
  STG.PAYMENT_MODE AS ACS_PAYMENT_MODE, STG.TRANSACTION_AMOUNT AS ACS_TRANSACTION_AMOUNT, STG.CASH_COUNTERID AS ACS_CASH_COUNTERID, STG.TRANSACTION_DATETIME AS ACS_TRANSACTION_DATETIME ,
-- FMS--
  FPA.PA_REFID, FPA.PAYMENT_TYPE, FCH.RECIEPT_NUMBER, FCD.PAYMENT_MODE, FCD.PAYMENT_AMOUNT, FCH.CREATED_BY AS CASHIER, FCH.CREATED_DATE AS TRANSACTION_DATETIME
FROM FMS_ACS_RECON_INPUTS_STG STG
LEFT OUTER JOIN FMS_COLLECTION_HEADER FCH ON STG.RECEIPT_NUMBER = FCH.RECIEPT_NUMBER AND STG.RECORD_INDICATOR = 'L'
INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCH.COL_REFID
INNER JOIN FMS_PA_HEADER FPA ON FCH.PA_REFID = FPA.PA_REFID
WHERE STG.STATUS = 'A' ORDER BY STG.LINE_NUMBER ASC;"
}

{

index:16,
ViewName : FMSV_ACTIVE_INSTALLMENTS,
MigQuery: "SELECT PA_REFID, RS_ID_NUMBER, RS_NAME, CASE_ID, COURT_NUMBER, DUE_DATE, DUE_AMOUNT, DATE_OF_ORDER, CO_ID, JO_ID, TOTAL_AMOUNT, OUTSTANDING_AMOUNT, STATUS  
FROM FMSV_FINES_PA_ENQUIRY WHERE ISNULL(DUE_AMOUNT,0) != 0 AND TERMINATION_STATUS != 'Y'
ORDER BY PA_REFID DESC;"

}

{

index:17,
ViewName : "FMSV_AGENCY_BILLING_DETAILS",
MigQuery:"SELECT AGENCY_CODE,
    PA_REFID,   BILLING_MONTH, BILLING_YEAR, SOURCE_SYSTEM, BILLING_DETAILS, DUE_DATE,
    SUM(WRN)  AS WRN, SUM(WRNA) AS WRNA, SUM(TKT)  AS TKT, SUM(TKTA) AS TKTA, SUM(SMN)  AS SMN,
    SUM(SMNA) AS SMNA, SUM(SBP)  AS SBP, SUM(SBPA) AS SBPA,SUM(WAL)  AS WAL,
    SUM(WALA) AS WALA
  FROM
    (SELECT E.AGENCY_CODE, A.PA_REFID, C.BILLING_MONTH, C.BILLING_YEAR, C.DUE_DATE,
      A.SOURCE_SYSTEM, A.BILLING_DETAILS, CASE  WHEN A.BILLING_TYPE='WRN'
        THEN A.QUANTITY ELSE 0  END AS WRN,  CASE  WHEN A.BILLING_TYPE='WRN'
        THEN A.QUANTITY_ADJUSTMENT  ELSE 0 END AS WRNA,
      CASE WHEN A.BILLING_TYPE='TKT' THEN A.QUANTITY ELSE 0 END AS TKT,
      CASE WHEN A.BILLING_TYPE='TKT' THEN A.QUANTITY_ADJUSTMENT  ELSE 0
      END AS TKTA, CASE WHEN A.BILLING_TYPE='SMN'   THEN A.QUANTITY  ELSE 0
      END AS SMN, CASE WHEN A.BILLING_TYPE='SMN' THEN A.QUANTITY_ADJUSTMENT
        ELSE 0 END AS SMNA, CASE WHEN A.BILLING_TYPE='SBP' THEN A.QUANTITY
        ELSE 0 END AS SBP, CASE WHEN A.BILLING_TYPE='SBP'  THEN A.QUANTITY_ADJUSTMENT
        ELSE 0 END AS SBPA, CASE WHEN A.BILLING_TYPE='WAL' THEN A.QUANTITY
        ELSE 0 END AS WAL,  CASE WHEN A.BILLING_TYPE='WAL' THEN A.QUANTITY_ADJUSTMENT
        ELSE 0 END AS WALA    FROM FMS_PA_BILLING_DETAILS A INNER JOIN FMS_PA_HEADER B
    ON A.PA_REFID = B.PA_REFID INNER JOIN FMS_PA_DETAILS C ON B.PA_REFID = C.PA_REFID
    INNER JOIN FMS_PA_RESPONDENTS D ON D.PA_REFID = C.PA_REFID INNER JOIN FMS_RESPONDENTS_DETAILS E
    ON D.RS_REFID = E.RS_REFID WHERE B.PAYMENT_TYPE='CD') ABS
  GROUP BY AGENCY_CODE, PA_REFID, BILLING_MONTH, BILLING_YEAR, SOURCE_SYSTEM, BILLING_DETAILS,DUE_DATE"
}

{
index:18,
ViewName : "FMSV_AGENCY_HOMEPAGE_DETAILS",
MigQuery: "SELECT ALA.AGENCY_CODE, CONVERT(VARCHAR, FPD.CREATED_DATE, 103) AS BILLED_DATE, FPD.DUE_AMOUNT, APP.PENDING_AMOUNT, APP.OUTSTANDING_AMOUNT  
FROM FMSV_AGENCY_LAST_INVOICE ALA 
INNER JOIN FMS_PA_DETAILS FPD ON FPD.INST_PA_REFID = ALA.INST_PA_REFID 
INNER JOIN FMSV_AGENCY_PENDING_PAYMENTS APP ON APP.AGENCY_CODE = ALA.AGENCY_CODE;"
}

{

index:19,
ViewName : "FMSV_AGENCY_LAST_INVOICE",
MigQuery:"SELECT FRD.AGENCY_CODE,MAX(INST_PA_REFID) AS INST_PA_REFID FROM FMS_PA_DETAILS  FPD    
INNER JOIN FMS_PA_HEADER FPH ON FPD.PA_REFID = FPH.PA_REFID   
INNER JOIN FMS_PA_RESPONDENTS FPR ON FPR.PA_REFID = FPH.PA_REFID   
INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FPR.RS_REFID   
WHERE FPH.PAYMENT_TYPE='CD' GROUP BY FRD.AGENCY_CODE;"
}

{
index:20,
ViewName : "FMSV_AGENCY_PENDING_PAYMENTS",

MigQuery:"SELECT AGENCY_CODE, SUM(PENDING_AMOUNT) PENDING_AMOUNT, SUM(OUTSTANDING_AMOUNT) OUTSTANDING_AMOUNT FROM 
(SELECT FRD.AGENCY_CODE,  
CASE WHEN FPD.DUE_DATE > GETDATE() THEN DUE_AMOUNT END AS PENDING_AMOUNT,  
CASE WHEN FPD.DUE_DATE <= GETDATE() THEN DUE_AMOUNT ELSE 0.0 END AS OUTSTANDING_AMOUNT  
FROM FMS_PA_DETAILS FPD    
INNER JOIN FMS_PA_HEADER FPH ON FPD.PA_REFID = FPH.PA_REFID   
INNER JOIN FMS_PA_RESPONDENTS FPR ON FPR.PA_REFID = FPH.PA_REFID   
INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FPR.RS_REFID   
WHERE FPH.PAYMENT_TYPE = 'CD') A 
GROUP BY AGENCY_CODE;"

}

{
index:21,
ViewName : "FMSV_BAIL_DEFAULTS",
MigQuery:"SELECT PH.PA_REFID AS PA_REFID,
    RDB.RS_NAME AS BAILOR_NAME, RDB.RS_ID_NUMBER AS BAILOR_ID,
    RDA.RS_NAME AS ACCUSED_NAME, RDA.RS_ID_NUMBER AS ACCUSED_ID,
     CASE WHEN CD.CASE_NO IS NOT NULL THEN CD.CASE_NO
      ELSE CD.CASE_ID
      END AS CASE_ID,
    CD.COURT_NUMBER,
    BD.BOND_ID, BD.BAIL_OFFERED_DATE, BD.BAIL_EXECUTED_DATE,   
    PD.DUE_DATE, PD.DUE_AMOUNT,
    UPPER(PH.CREATED_BY) AS CREATED_BY,
    CD.SOURCE_SYSTEM
  FROM FMS_PA_HEADER PH 
  INNER JOIN FMS_CASE_DETAILS CD  ON CD.CASE_REFID = PH.CASE_REFID
  INNER JOIN FMS_BAILBOND_DETAILS BD ON BD.PA_REFID = PH.PA_REFID
  INNER JOIN FMS_PA_RESPONDENTS PRB ON PRB.PA_REFID = PH.PA_REFID AND PRB.RS_TYPE ='BLR'
  INNER JOIN FMS_RESPONDENTS_DETAILS RDB ON RDB.RS_REFID = PRB.RS_REFID
  INNER JOIN FMS_PA_RESPONDENTS PRA ON PRA.PA_REFID = PH.PA_REFID AND PRA.RS_TYPE ='ACC'
  INNER JOIN FMS_RESPONDENTS_DETAILS RDA ON RDA.RS_REFID = PRA.RS_REFID
  INNER JOIN FMS_PA_DETAILS PD ON PD.PA_REFID = PH.PA_REFID
  WHERE PH.PAYMENT_TYPE ='CB' AND PH.STATUS  != 'I'
  AND PD.INST_PA_REFID NOT IN (SELECT INST_PA_REFID FROM FMSV_COLLECTION_HEADER FCH WHERE  FCH.INST_PA_REFID = PD.INST_PA_REFID AND ISNULL(FCH.IS_VOID, 'N') != 'Y';"
}

{

index:22,
ViewName : "FMSV_BAIL_JAV_TRANS_DETAILS",

MigQuery:"SELECT BPAT.PA_REFID, BAILOR_NAME, BAILOR_ID, RS_NAME, RS_ID, CASE_ID, COURT_NUMBER, BOND_ID, TRANSACTION_AMOUNT,
    BAIL_OFFERED_DATE, BAIL_EXECUTED_DATE, BPAT.RECEIPT_NUMBER, BPAT.COLLECTION_DATE, BPAT.TRANSACTION_TYPE, TRNF_PA_REFID,
    BAILBOND_TRANS_REFID, SOURCE_SYSTEM, CASH_BANK_CODE, CASH_ACCOUNT_NUMBER, NEXT_COURT_EVENT_DATE,
    JAV.STATUS, JAV.UPDATED_DATE AS FINANCE_APPROVER_DATE,
    ROD.FORFEIT_AMOUNT, ROD.OFFSET_AMOUNT, ROD.CREATED_DATE AS REFUND_DATE, JAV.JOURNAL_ID, JAV.JOURNAL_DATE
FROM FMSV_BAIL_PA_TRANS_DETAILS BPAT
INNER JOIN FMSV_BAIL_REFUND_ORDER_SUMMARY ROD ON BPAT.PA_REFID = ROD.PA_REFID
INNER JOIN FMS_JAV_HEADER JAV ON JAV.JAV_REFID = ROD.JAV_VOUCHER_NO
WHERE BPAT.TRANSACTION_TYPE = 'CASH';"
}

{
index:23,
ViewName : "FMSV_BAIL_ORDER_SEARCH",

MigQuery: "SELECT PH.PA_REFID AS PA_REFID,
    RDB.RS_NAME      AS BAILOR_NAME,
    RDB.RS_ID_NUMBER AS BAILOR_ID,
    RDB.RS_ID_TYPE   AS BAILOR_ID_TYPE,
    RDA.RS_NAME      AS RS_NAME,
    RDA.RS_ID_NUMBER AS RS_ID,
    RDA.RS_ID_TYPE   AS RS_ID_TYPE,
    CD.CASE_ID       AS CASE_ID,
    CD.COURT_NUMBER,   BD.BOND_ID,
    ISNULL(BBT.TRASACTION_AMOUNT, '0.00') AS TRANSACTION_AMOUNT,
    BD.BAIL_OFFERED_DATE,
    BD.BAIL_EXECUTED_DATE,
    BBT.TRANSACTION_TYPE,
    BBT.TRNF_PA_REFID,
    BBT.PA_REFID AS BAILBOND_TRANS_REFID,
    CD.SOURCE_SYSTEM,
     PH.STATUS
  FROM FMS_PA_HEADER PH
  INNER JOIN FMS_CASE_DETAILS CD
  ON CD.CASE_REFID = PH.CASE_REFID
  INNER JOIN FMS_BAILBOND_DETAILS BD
  ON BD.PA_REFID = PH.PA_REFID
  INNER JOIN FMS_PA_RESPONDENTS PRB
  ON PRB.PA_REFID = PH.PA_REFID
  AND PRB.RS_TYPE ='BLR'
  INNER JOIN FMS_RESPONDENTS_DETAILS RDB
  ON RDB.RS_REFID = PRB.RS_REFID
  INNER JOIN FMS_PA_RESPONDENTS PRA
  ON PRA.PA_REFID = PH.PA_REFID
  AND PRA.RS_TYPE ='ACC'
  INNER JOIN FMS_RESPONDENTS_DETAILS RDA
  ON RDA.RS_REFID = PRA.RS_REFID
  LEFT OUTER JOIN FMS_PA_DETAILS PD
  ON PD.PA_REFID = PH.PA_REFID
  LEFT OUTER JOIN FMS_BAILBOND_TRANS_DETAILS BBT
  ON BBT.PA_REFID = BD.PA_REFID
   WHERE PH.PAYMENT_TYPE        ='CB';"
}

{

index:24,
ViewName : "FMSV_BAIL_PA_ENQUIRY",
MigQuery:"SELECT PH.PA_REFID AS PA_REFID,
    RDB.RS_NAME AS BAILOR_NAME, RDB.RS_ID_NUMBER AS BAILOR_ID, RDB.RS_ID_TYPE AS BAILOR_ID_TYPE,
    RDA.RS_NAME AS RS_NAME, RDA.RS_ID_NUMBER AS RS_ID, RDA.RS_ID_TYPE AS RS_ID_TYPE,
    CASE
      WHEN CD.CASE_NO IS NOT NULL THEN CD.CASE_NO
      ELSE CD.CASE_ID
    END AS CASE_ID,
    CD.COURT_NUMBER, BD.BOND_ID,
    ISNULL(BBT.TRASACTION_AMOUNT,'0.00') AS TRANSACTION_AMOUNT,
    CASE
      WHEN BBT.TRANSACTION_TYPE != 'CASH' THEN FBS.STATUS
      ELSE ISNULL(FCD.RECIEPT_NUMBER,'PENDING')
    END AS STATUS,
    CASE
      WHEN FCP2.CREATED_DATE IS NOT NULL THEN 'REFUNDED'
      WHEN ROD.CREATED_DATE IS NOT NULL AND ISNULL(ROD.REFUND_AMOUNT,0) > 0 THEN 'UNDER PROCESSING'
      ELSE ''
    END AS REFUND_STATUS,
    CASE
      WHEN FCP2.CREATED_DATE IS NULL THEN ROD.CREATED_DATE
      ELSE FCP2.CREATED_DATE
    END AS LAST_DATE_OF_REFUND,
    CASE
      WHEN FCP2.CREATED_DATE IS NULL THEN ISNULL(ROD.REFUND_AMOUNT,0)
      ELSE ISNULL(FCP1.TRANSACTION_AMOUNT,0) + ISNULL(FCP2.TRANSACTION_AMOUNT,0)
    END AS REFUNDED_AMOUNT,
    ISNULL(FCP2.TRANSACTION_AMOUNT,0) AS ACTUAL_REFUND_AMOUNT,
    CASE
      WHEN BBT.TRANSACTION_TYPE = 'CASH' THEN (TRANSACTION_AMOUNT - ISNULL(FCD.PAID_AMOUNT,0))
      ELSE TRANSACTION_AMOUNT
    END AS BALANCE_AMOUNT,
    BD.BAIL_OFFERED_DATE, BD.BAIL_EXECUTED_DATE,
    FCD.RECIEPT_NUMBER, FCD.COLLECTION_DATE,
    BBT.TRANSACTION_TYPE, BBT.TRNF_PA_REFID,
    BBT.PA_REFID AS BAILBOND_TRANS_REFID,
    CD.SOURCE_SYSTEM, BD.NEXT_COURT_EVENT_DATE,
    BBT.BANK_CODE AS FD_BANK_CODE,
    BBT.ACCOUNT_NUMBER AS FD_ACCOUNT_NUMBER,
    BBT.BANK_CONFIRMATION, BBT.LIEN_REQ_DATE, BBT.LIEN_DATE, BBT.BANK_CONFIRMATION_DATE, BBT.IS_RETURNED, BBT.RETURNED_DATE,
    RDB.RS_BANK_CODE AS CASH_BANK_CODE,
    RDB.RS_BANK_ACCOUNT_NUMBER AS CASH_ACCOUNT_NUMBER,
    RDB.RS_BANK_AC_TYPE AS CASH_ACCOUNT_TYPE,
    ISNULL(FCP1.TRANSACTION_AMOUNT,0) AS TRANSFER_AMOUNT,
    FCP1.TRANSACTION_REFERENCE AS BAIL_TRANSFER_INFO,
    CASE
      WHEN FCH.BANK_REFERENCE IS NOT NULL THEN 'Bail transferred from:' + FCH.BANK_REFERENCE
      ELSE ''
    END AS REMARKS, BLP.LETTER_NUMBER
FROM FMS_PA_HEADER PH
INNER JOIN FMS_CASE_DETAILS CD ON CD.CASE_REFID = PH.CASE_REFID
INNER JOIN FMS_BAILBOND_DETAILS BD ON BD.PA_REFID = PH.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS PRB ON PRB.PA_REFID = PH.PA_REFID AND PRB.RS_TYPE ='BLR'
INNER JOIN FMS_RESPONDENTS_DETAILS RDB ON RDB.RS_REFID = PRB.RS_REFID
INNER JOIN FMS_PA_RESPONDENTS PRA ON PRA.PA_REFID = PH.PA_REFID AND PRA.RS_TYPE ='ACC'
INNER JOIN FMS_RESPONDENTS_DETAILS RDA ON RDA.RS_REFID = PRA.RS_REFID
LEFT OUTER JOIN FMS_PA_DETAILS PD ON PD.PA_REFID = PH.PA_REFID
LEFT OUTER JOIN FMSV_COLLECTION_DETAILS_EDC FCD ON PD.INST_PA_REFID = FCD.INST_PA_REFID
LEFT OUTER JOIN FMS_BAILBOND_TRANS_DETAILS BBT ON BBT.PA_REFID = BD.PA_REFID
LEFT OUTER JOIN FMSV_BAILBONG_STATUS FBS ON BBT.TRNF_PA_REFID = FBS.TRNF_PA_REFID
LEFT OUTER JOIN FMSV_BAIL_REFUND_ORDER_SUMMARY ROD ON PH.PA_REFID = ROD.PA_REFID
LEFT OUTER JOIN FMS_COLLECTION_PAYMENTS FCP1 ON FCP1.COL_REFID = FCD.COL_REFID AND FCP1.TRANSACTION_TYPE ='REUSED'
LEFT OUTER JOIN FMSV_COLLECTION_PAYMENTS_SUMRY FCP2 ON FCP2.TRANSACTION_REFERENCE=ROD.NFS_VOUCHER_NO AND FCP2.TRANSACTION_TYPE = 'REFUND'
LEFT OUTER JOIN FMS_FD_BAIL_LIEN_PROCESS_DTLS BLP ON BBT.TRNF_PA_REFID = BLP.TRNF_PA_REFID AND BLP.LETTER_TYPE = 'P' AND BLP.STATUS = 'A'
WHERE PH.PAYMENT_TYPE = 'CB' AND PH.STATUS != 'I';"
}

{

index:25,
ViewName : "FMSV_BAIL_PA_TRANS_DETAILS",
MigQuery: "SELECT PH.PA_REFID AS PA_REFID, RDB.RS_NAME AS BAILOR_NAME, RDB.RS_ID_NUMBER AS BAILOR_ID, RDB.RS_ID_TYPE AS BAILOR_ID_TYPE,
    RDA.RS_NAME AS RS_NAME, RDA.RS_ID_NUMBER AS RS_ID, RDA.RS_ID_TYPE AS RS_ID_TYPE,
    CASE
      WHEN CD.CASE_NO IS NOT NULL THEN CD.CASE_NO
      ELSE CD.CASE_ID
    END AS CASE_ID,
    CD.COURT_NUMBER, ISNULL(CD.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM, BD.BOND_ID,
    ISNULL(BBT.TRASACTION_AMOUNT, '0.00') AS TRANSACTION_AMOUNT, 
    BBT.TRANSACTION_TYPE, BBT.TRNF_PA_REFID, BBT.PA_REFID AS BAILBOND_TRANS_REFID,
    BBT.BANK_CODE AS FD_BANK_CODE, BBT.ACCOUNT_NUMBER AS FD_ACCOUNT_NUMBER,
    BBT.BANK_CONFIRMATION, BBT.LIEN_REQ_DATE, BBT.LIEN_DATE, BBT.BANK_CONFIRMATION_DATE, BBT.IS_RETURNED, BBT.RETURNED_DATE,
    RDB.RS_BANK_CODE AS CASH_BANK_CODE, RDB.RS_BANK_ACCOUNT_NUMBER AS CASH_ACCOUNT_NUMBER, RDB.RS_BANK_AC_TYPE AS CASH_ACCOUNT_TYPE,
    BD.BAIL_OFFERED_DATE, BD.BAIL_EXECUTED_DATE, BD.NEXT_COURT_EVENT_DATE, FCD.COL_REFID, FCD.RECIEPT_NUMBER, FCD.COLLECTION_DATE, FCD.PAID_AMOUNT
FROM FMS_PA_HEADER PH
INNER JOIN FMS_CASE_DETAILS CD ON CD.CASE_REFID = PH.CASE_REFID
INNER JOIN FMS_BAILBOND_DETAILS BD ON BD.PA_REFID = PH.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS PRB ON PRB.PA_REFID = PH.PA_REFID AND PRB.RS_TYPE ='BLR'
INNER JOIN FMS_RESPONDENTS_DETAILS RDB ON RDB.RS_REFID = PRB.RS_REFID
INNER JOIN FMS_PA_RESPONDENTS PRA ON PRA.PA_REFID = PH.PA_REFID AND PRA.RS_TYPE ='ACC'
INNER JOIN FMS_RESPONDENTS_DETAILS RDA ON RDA.RS_REFID = PRA.RS_REFID
LEFT OUTER JOIN FMS_PA_DETAILS PD ON PD.PA_REFID = PH.PA_REFID
LEFT OUTER JOIN FMSV_COLLECTION_DETAILS_EDC FCD ON PD.INST_PA_REFID = FCD.INST_PA_REFID
LEFT OUTER JOIN FMS_BAILBOND_TRANS_DETAILS BBT ON BBT.PA_REFID = BD.PA_REFID
WHERE PH.PAYMENT_TYPE = 'CB' AND PH.STATUS != 'I';"

}

{

index:26,
ViewName : "FMSV_BAIL_REFUND_ORDER_SUMMARY",
MigQuery:"SELECT PA_REFID,
    SUM(OFFSET_AMOUNT) AS OFFSET_AMOUNT,
    SUM(FORFEIT_AMOUNT) AS FORFEIT_AMOUNT,
    SUM(REFUND_AMOUNT) AS REFUND_AMOUNT,
    MAX(CREATED_DATE) AS CREATED_DATE,
    MAX(NFS_VOUCHER_NO) AS NFS_VOUCHER_NO,
    MAX(JAV_VOUCHER_NO) AS JAV_VOUCHER_NO
FROM FMS_REFUND_ORDER_DETAILS
WHERE ISNULL(ACTIVE_INDICATOR, 'Y') != 'N' AND ISNULL(BAIL_TYPE, 'CASH') = 'CASH'
GROUP BY PA_REFID;"
}

{

index:27,
ViewName : "FMSV_BAIL_REFUND_TRANS_DETAILS",

MigQuery:"SELECT BPAT.PA_REFID, BAILOR_NAME, BAILOR_ID, RS_NAME, RS_ID, CASE_ID, COURT_NUMBER, BOND_ID, TRANSACTION_AMOUNT,
    BAIL_OFFERED_DATE, BAIL_EXECUTED_DATE, BPAT.RECIEPT_NUMBER, BPAT.COLLECTION_DATE, BPAT.TRANSACTION_TYPE, TRNF_PA_REFID,
    BAILBOND_TRANS_REFID, SOURCE_SYSTEM, CASH_BANK_CODE, CASH_ACCOUNT_NUMBER, NEXT_COURT_EVENT_DATE,
    CASE
      WHEN FCP.CREATED_DATE IS NULL THEN ROD.CREATED_DATE
      ELSE FCP.CREATED_DATE
    END AS FINANCE_APPROVER_DATE,
    CASE
      WHEN FCP.CREATED_DATE IS NULL THEN ISNULL(ROD.REFUND_AMOUNT, 0)
      ELSE ISNULL(FCP.TRANSACTION_AMOUNT, 0)
    END AS REFUNDED_AMOUNT,
    ROD.REFUND_AMOUNT, ROD.FORFEIT_AMOUNT, ROD.OFFSET_AMOUNT, ROD.CREATED_DATE AS REFUND_DATE,
    PVH.NFS_PAID_DATE, VITAL_SUBMISSION_DATE AS MOF_SUBMISSION_DATE, ROD.NFS_VOUCHER_NO
FROM FMSV_BAIL_PA_TRANS_DETAILS BPAT
INNER JOIN FMSV_BAIL_REFUND_ORDER_SUMMARY ROD ON BPAT.PA_REFID = ROD.PA_REFID
LEFT OUTER JOIN FMSV_COLLECTION_PAYMENTS_SUMRY FCP ON FCP.TRANSACTION_REFERENCE = ROD.NFS_VOUCHER_NO AND FCP.TRANSACTION_TYPE = 'REFUND'
LEFT OUTER JOIN FMS_PV_HEADER PVH ON PVH.PAYMENT_REFERENCE = ROD.NFS_VOUCHER_NO
WHERE BPAT.TRANSACTION_TYPE = 'CASH';"
}

{

index:28,
ViewName : "FMSV_BAIL_REUSED_TRANS_DETAILS",
MigQuery:"SELECT BPAT.PA_REFID, BAILOR_NAME, BAILOR_ID, RS_NAME, RS_ID, CASE_ID, COURT_NUMBER, BOND_ID, TRANSACTION_AMOUNT,
    BAIL_OFFERED_DATE, BAIL_EXECUTED_DATE, BPAT.RECEIPT_NUMBER, BPAT.COLLECTION_DATE, BPAT.TRANSACTION_TYPE, TRNF_PA_REFID,
    BAILBOND_TRANS_REFID, SOURCE_SYSTEM, CASH_BANK_CODE, CASH_ACCOUNT_NUMBER, NEXT_COURT_EVENT_DATE,
    CASE
      WHEN FCP.CREATED_DATE IS NULL THEN ROD.CREATED_DATE
      ELSE FCP.CREATED_DATE
    END AS FINANCE_APPROVER_DATE,
    CASE
      WHEN FCP.CREATED_DATE IS NULL THEN ISNULL(ROD.REFUND_AMOUNT, 0)
      ELSE ISNULL(FCP.TRANSACTION_AMOUNT, 0)
    END AS REFUNDED_AMOUNT,
    ISNULL(FCP.TRANSACTION_AMOUNT, 0) AS TRANSFER_AMOUNT,
    FCP.TRANSACTION_REFERENCE AS BAIL_TRANSFER_INFO,
    CASE
      WHEN FCH.BANK_REFERENCE IS NOT NULL THEN 'Bail transferred from:' + FCH.BANK_REFERENCE
      ELSE ''
    END AS REMARKS,
    ROD.REFUND_AMOUNT, ROD.FORFEIT_AMOUNT, ROD.OFFSET_AMOUNT, ROD.CREATED_DATE AS REFUND_DATE
FROM FMSV_BAIL_PA_TRANS_DETAILS BPAT
INNER JOIN FMSV_BAIL_REFUND_ORDER_SUMMARY ROD ON BPAT.PA_REFID = ROD.PA_REFID
LEFT OUTER JOIN FMS_COLLECTION_PAYMENTS FCP ON FCP.COL_REFID = BPAT.COL_REFID AND FCP.TRANSACTION_TYPE = 'REUSED'
LEFT OUTER JOIN 
    (SELECT PA_REFID, STRING_AGG(BANK_REFERENCE, ', ') WITHIN GROUP (ORDER BY BANK_REFERENCE) AS BANK_REFERENCE
    FROM FMS_COLLECTION_HEADER FCH1 
    INNER JOIN FMS_COLLECTION_DETAILS FCD1 ON FCH1.COL_REFID = FCD1.COL_REFID 
    WHERE FCD1.PAYMENT_MODE = 'BO'
    GROUP BY FCH1.PA_REFID) FCH ON FCH.PA_REFID = BPAT.PA_REFID
WHERE BPAT.TRANSACTION_TYPE = 'CASH';"

}

{

index:29,
ViewName : "FMSV_BAILBONG_STATUS",

MigQuery:"SELECT PA_REFID, TRNF_PA_REFID,
CASE 
    WHEN ISNULL(IS_RETURNED, 'N') = 'Y' THEN 'CLOSED'
    WHEN ISNULL(BANK_CONFIRMATION, 'N') = 'Y' AND ISNULL(IS_RETURNED, 'N') != 'Y' THEN 'PENDING RETURN'
    WHEN ISNULL(BANK_CONFIRMATION, 'N') = 'Y' THEN 'FILED'
    WHEN ISNULL(IS_RECEIVED, 'N') = 'Y' AND BANK_CONFIRMATION = 'N' THEN 'REJECTED'
    WHEN ISNULL(IS_RECEIVED, 'N') = 'Y' AND BANK_CONFIRMATION IS NULL THEN 'UNDER PROCESSING'
    WHEN ISNULL(IS_RECEIVED, 'N') = 'N' THEN 'PENDING RECEIPT'
    ELSE '' 
END AS STATUS
FROM FMS_BAILBOND_TRANS_DETAILS;"
}

{

index:30,

ViewName : "FMSV_BAILIFFS_PAYMENT",

MigQuery:"SELECT  FPVH.PAYMENT_REFERENCE, FPVH.VENDOR_NAME, FPVH.VENDOR_ID, FPLD.AMOUNT FROM FMS_PV_HEADER FPVH 
INNER JOIN FMS_PV_LINE_DETAILS FPLD 
ON FPVH.PAYMENT_REFERENCE=FPLD.PAYMENT_REFERENCE;"
}

{

index:31,
ViewName : "FMSV_BAILS_RECON_REPORT",
MigQuery: "SELECT PH.PA_REFID AS PA_REFID,
    RDB.RS_NAME AS BAILOR_NAME,
    RDB.RS_ID_NUMBER AS BAILOR_ID,
    RDB.RS_ID_TYPE AS BAILOR_ID_TYPE,
    RDA.RS_NAME AS RS_NAME,
    RDA.RS_ID_NUMBER AS RS_ID,
    RDA.RS_ID_TYPE AS RS_ID_TYPE,
    CD.CASE_ID AS CASE_ID,
    ISNULL(CD.CASE_NO, '') AS CASE_NO,
    CD.COURT_NUMBER,
    BD.BOND_ID,
    ISNULL(BBT.TRANSACTION_AMOUNT, '0.00') AS TRANSACTION_AMOUNT,
    CASE
        WHEN ISNULL(PH.STATUS, 'A') = 'I' THEN 'WITHDRAWN'
        WHEN BBT.TRANSACTION_TYPE != 'CASH' THEN FBS.STATUS
        ELSE ISNULL(FCD.RECEIPT_NUMBER, 'PENDING')
    END AS STATUS,
    CASE
        WHEN BBT.TRANSACTION_TYPE = 'CASH' THEN (TRANSACTION_AMOUNT - ISNULL(FCD.PAID_AMOUNT, 0))
        ELSE TRANSACTION_AMOUNT
    END AS BALANCE_AMOUNT,
    BD.TOTAL_BAIL,
    BD.TOTAL_MONETARY_BAIL,
    PH.TOTAL_AMOUNT AS TOTAL_PAYABLE_AMOUNT,
    FCD.RECEIPT_NUMBER,
    FCD.COLLECTION_DATE,
    BBT.TRANSACTION_TYPE,
    ISNULL(CD.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM,
    PH.CREATED_DATE AS TRANSACTION_DATE,
    CONVERT(VARCHAR, PH.CREATED_DATE, 108) AS TRANSACTION_TIME_24HR,
    ISNULL(PH.STATUS, 'A') AS RECORD_STATUS,
    PH.REMARKS
FROM FMS_PA_HEADER PH
INNER JOIN FMS_CASE_DETAILS CD ON CD.CASE_REFID = PH.CASE_REFID
INNER JOIN FMS_BAILBOND_DETAILS BD ON BD.PA_REFID = PH.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS PRB ON PRB.PA_REFID = PH.PA_REFID AND PRB.RS_TYPE = 'BLR'
INNER JOIN FMS_RESPONDENTS_DETAILS RDB ON RDB.RS_REFID = PRB.RS_REFID
INNER JOIN FMS_PA_RESPONDENTS PRA ON PRA.PA_REFID = PH.PA_REFID AND PRA.RS_TYPE = 'ACC'
INNER JOIN FMS_RESPONDENTS_DETAILS RDA ON RDA.RS_REFID = PRA.RS_REFID
LEFT OUTER JOIN FMS_PA_DETAILS PD ON PD.PA_REFID = PH.PA_REFID
LEFT OUTER JOIN FMSV_COLLECTION_DETAILS FCD ON PD.INST_PA_REFID = FCD.INST_PA_REFID
LEFT OUTER JOIN FMS_BAILBOND_TRANS_DETAILS BBT ON BBT.PA_REFID = BD.PA_REFID
LEFT OUTER JOIN FMSV_BAILBONG_STATUS FBS ON BBT.TRNF_PA_REFID = FBS.TRNF_PA_REFID
WHERE PH.PAYMENT;"

}

{

index:32,
ViewName : "FMSV_CASH_BAIL_REPORT",

MigQuery:"SELECT A.PA_REFID,
    BAILOR_NAME,
    BAILOR_ID,
    RS_NAME,
    RS_ID,
    CASE_ID,
    COURT_NUMBER,
    BOND_ID,
    TRANSACTION_AMOUNT,
    A.STATUS,
    REFUND_STATUS,
    LAST_DATE_OF_REFUND,
    (TRANSACTION_AMOUNT - ISNULL(ACTUAL_REFUND_AMOUNT, 0.0) - ISNULL(FORFEIT_AMOUNT, 0.0) - ISNULL(OFFSET_AMOUNT, 0.0) - ISNULL(TRANSFER_AMOUNT, 0)) AS BALANCE_AMOUNT,
    BAIL_OFFERED_DATE,
    BAIL_EXECUTED_DATE,
    A.RECEIPT_NUMBER,
    A.COLLECTION_DATE,
    TRANSACTION_TYPE,
    TRNF_PA_REFID,
    BAILBOND_TRANS_REFID,
    SOURCE_SYSTEM,
    CASH_BANK_CODE,
    CASH_ACCOUNT_NUMBER,
    NEXT_COURT_EVENT_DATE,
    ACTUAL_REFUND_AMOUNT AS REFUND_AMOUNT,
    FORFEIT_AMOUNT,
    OFFSET_AMOUNT,
    ISNULL(TRANSFER_AMOUNT, 0) AS AMOUNT_TRANSFERRED,
    B.CREATED_DATE AS REFUND_DATE,
    C.PROCESSED_DATE AS VITAL_SUBMISSION_DATE,
    BAIL_TRANSFER_INFO AS BAIL_TRANSFER_INFO,
    A.REMARKS
FROM FMSV_BAIL_PA_ENQUIRY A
LEFT OUTER JOIN FMSV_BAIL_REFUND_ORDER_SUMMARY B ON A.PA_REFID = B.PA_REFID
LEFT OUTER JOIN FMS_MOF_PROCESS_DETAILS C ON C.PAYMENT_REFERENCE = B.NFS_VOUCHER_NO
WHERE TRANSACTION_TYPE = 'CASH';"

}

{

index:33,
ViewName : "FMSV_CASH_BAIL_TRANS_REPORT",
MigQuery:"SELECT PA_REFID, BAILOR_NAME, BAILOR_ID, BAILOR_ID_TYPE, RS_NAME, RS_ID, RS_ID_TYPE, CASE_ID, COURT_NUMBER, SOURCE_SYSTEM, BOND_ID,
    TRANSACTION_AMOUNT, TRANSACTION_TYPE, TRNF_PA_REFID, BAILBOND_TRANS_REFID, FD_BANK_CODE, FD_ACCOUNT_NUMBER, BANK_CONFIRMATION,
    LIEN_REQ_DATE, LIEN_DATE, BANK_CONFIRMATION_DATE, IS_RETURNED, RETURNED_DATE, CASH_BANK_CODE, CASH_ACCOUNT_NUMBER, CASH_ACCOUNT_TYPE,
    BAIL_OFFERED_DATE, BAIL_EXECUTED_DATE, NEXT_COURT_EVENT_DATE, RECEIPT_NUMBER, COLLECTION_DATE,
    FRH.CDR_REFID AS DEPOSIT_REFID, REP_FROM_DATE, BANK_REP_DATE, BANK_IN_DATE
FROM FMSV_BAIL_PA_TRANS_DETAILS BPAT
INNER JOIN FMSV_CD_REVENUE_LINE_DETAILS RLD ON CONVERT(VARCHAR, BPAT.COLLECTION_DATE, 112) = CONVERT(VARCHAR, RLD.REP_FROM_DATE, 112)
INNER JOIN FMS_CD_REVENUE_HEADER FRH ON RLD.CDR_REFID = FRH.CDR_REFID  
WHERE BPAT.TRANSACTION_TYPE = 'CASH';"
}

{

index:34,
ViewName : "FMSV_CB_REFUND_DETAILS",
MigQuery:"SELECT FCD.CASE_ID AS CASE_ID,
    ROD.PA_REFID AS FMS_TXN_ID,
    ROD.REFUND_AMOUNT AS REFUND_AMT,
    ROD.DATE_OF_COURT_ORDER AS REFUND_DT,
    ROD.FORFEIT_AMOUNT AS FOREFEIT_AMT,
    ROD.DATE_OF_COURT_ORDER AS FOREFEIT_DT,
    ROD.OFFSET_AMOUNT AS OFFSET_AMT,
    ROD.DATE_OF_COURT_ORDER AS OFFSET_DT,
    ROD.CREATED_DATE CREATEDON,
    ROD.CREATED_BY CREATEDBY,
    ROD.UPDATED_DATE UPDATEDON,
    ROD.UPDATED_BY UPDATEDBY
FROM FMS_REFUND_ORDER_DETAILS ROD
INNER JOIN FMS_PA_HEADER FPH ON ROD.PA_REFID = FPH.PA_REFID
INNER JOIN FMS_CASE_DETAILS FCD ON FPH.CASE_REFID = FCD.CASE_REFID;"

}

{

index:35,
ViewName : "FMSV_CC_COLLECTION_REPORT",
MigQuery: "SELECT A.COLLECTION_DATE, A.RECEIPT_NUMBER, A.PA_REFID,
    CASE  
      WHEN B.IS_VENDOR_BANK IS NOT NULL AND B.IS_VENDOR_BANK = 'Y' THEN 'ON-US'
      WHEN B.IS_VENDOR_BANK IS NOT NULL AND B.IS_VENDOR_BANK = 'N' THEN 'OFF-US'
      ELSE B.BANK_CODE
    END AS BANK_CODE,
    B.BANK_REFERENCE, B.PAYMENT_AMOUNT, B.PAYMENT_MODE, C.PAYMENT_TYPE,
    CASE
      WHEN (B.BANK_CODE IS NOT NULL AND (B.BANK_CODE = '7171' OR B.BANK_CODE = '9998')) OR (B.IS_VENDOR_BANK = 'Y')
      THEN (B.PAYMENT_AMOUNT * D.VENDOR_BANK_RATE) / 100
      ELSE (B.PAYMENT_AMOUNT * D.OTHER_BANK_RATE) / 100
    END AS CC_CHARGES,
    ISNULL(C.COST_CENTER, '') AS COST_CENTER, A.CREATED_BY AS CASHIER,
    CASE 
      WHEN (B.BANK_CODE IS NOT NULL AND (B.BANK_CODE = '7171' OR B.BANK_CODE = '9998')) OR (B.IS_VENDOR_BANK = 'Y')
      THEN 'Y'
      ELSE 'N'
    END AS VENDOR_BANK_FILTER,
    A.CREATED_DATE AS PAYMENT_DATE,
    CONVERT(VARCHAR, A.CREATED_DATE, 108) AS PAYMENT_TIME_24HR
FROM FMS_COLLECTION_HEADER A
INNER JOIN FMS_PA_HEADER C ON A.PA_REFID = C.PA_REFID
INNER JOIN FMS_COLLECTION_DETAILS B ON A.COL_REFID = B.COL_REFID
INNER JOIN FMS_CREDITCARD_CHARGES D ON CONVERT(VARCHAR, A.COLLECTION_DATE, 112) BETWEEN CONVERT(VARCHAR, D.FROM_DATE, 112) AND CONVERT(VARCHAR, D.TO_DATE, 112)
WHERE ISNULL(A.IS_VOID, 'N') NOT IN ('Y', 'R', 'T') AND (B.PAYMENT_MODE IN ('CRDV', 'CRDM', 'CRDA', 'CRDO') OR (ISNULL(ONLINE_PAY_MODE, 'N') IN ('CRDV', 'CRDM', 'CRDO')))
ORDER BY A.CREATED_DATE DESC;"

}

{

index:36,
ViewName : "FMSV_CD_REVENUE_LINE_DETAILS",
MigQuery:"SELECT CDR_REFID, REP_FROM_DATE 
FROM FMS_CD_REVENUE_LINE_DETAILS
GROUP BY CDR_REFID, REP_FROM_DATE;"

}

{

index:37,
ViewName : "FMSV_CDB_ENQUIRY",

MigQuery:"SELECT CDB.AGENCY_CODE, CDB.PA_REFID, CDB.BILLING_MONTH, CDB.BILLING_YEAR,
    CDB.SOURCE_SYSTEM, CDB.UNIT_PRICE, CDB.WRN, CDB.TKT, CDB.SMN, CDB.SBP, CDB.WAL,
    CASE
      WHEN ISNULL(G.RECEIPT_NUMBER, 'RCPT') != 'RCPT' THEN G.RECEIPT_NUMBER
      WHEN F.STATUS = 'S' THEN 'SUBMITTED'
      ELSE 'DRAFT'
    END AS STATUS
FROM
    (SELECT AGENCY_CODE, PA_REFID, BILLING_MONTH, BILLING_YEAR, SOURCE_SYSTEM, UNIT_PRICE,
        SUM(WRN) AS WRN,
        SUM(TKT) AS TKT,
        SUM(SMN) AS SMN,
        SUM(SBP) AS SBP,
        SUM(WAL) AS WAL
    FROM
        (SELECT E.AGENCY_CODE, A.PA_REFID, C.BILLING_MONTH, C.BILLING_YEAR, A.SOURCE_SYSTEM, A.UNIT_PRICE,
            CASE WHEN A.BILLING_TYPE = 'WRN' THEN A.QUANTITY + A.QUANTITY_ADJUSTMENT ELSE 0 END AS WRN,
            CASE WHEN A.BILLING_TYPE = 'TKT' THEN A.QUANTITY + A.QUANTITY_ADJUSTMENT ELSE 0 END AS TKT,
            CASE WHEN A.BILLING_TYPE = 'SMN' THEN A.QUANTITY + A.QUANTITY_ADJUSTMENT ELSE 0 END AS SMN,
            CASE WHEN A.BILLING_TYPE = 'SBP' THEN A.QUANTITY + A.QUANTITY_ADJUSTMENT ELSE 0 END AS SBP,
            CASE WHEN A.BILLING_TYPE = 'WAL' THEN A.QUANTITY + A.QUANTITY_ADJUSTMENT ELSE 0 END AS WAL
        FROM FMS_PA_BILLING_DETAILS A
        INNER JOIN FMS_PA_HEADER B ON A.PA_REFID = B.PA_REFID
        INNER JOIN FMS_PA_DETAILS C ON B.PA_REFID = C.PA_REFID
        INNER JOIN FMS_PA_RESPONDENTS D ON D.PA_REFID = C.PA_REFID
        INNER JOIN FMS_RESPONDENTS_DETAILS E ON D.RS_REFID = E.RS_REFID
        WHERE B.PAYMENT_TYPE = 'CD'
        ) AS ABS
    GROUP BY AGENCY_CODE, PA_REFID, BILLING_MONTH, BILLING_YEAR, SOURCE_SYSTEM, UNIT_PRICE
    ) AS CDB
INNER JOIN FMS_AGENCY_SUBMISSION_DETAILS F ON F.PA_REFID = CDB.PA_REFID AND F.SOURCE_SYSTEM = CDB.SOURCE_SYSTEM
LEFT OUTER JOIN FMSV_COLLECTION_HEADER G ON G.PA_REFID = CDB.PA_REFID AND ISNULL(G.IS_VOID, 'N') != 'Y';"

}

{

index:38,
ViewName : "FMSV_CDB_REPORT",
MigQuery: "SELECT DISTINCT  
    A.SOURCE_SYSTEM, 
    E.AGENCY_CODE,
    B.PA_REFID AS INVOICE_NO,
    B.CREATED_DATE AS INVOICE_DATE,
    C.DUE_AMOUNT AS BILLED_AMOUNT,
    C.DUE_DATE,
    ISNULL(FCD.PAYMENT_AMOUNT, 0) AS PAID_AMOUNT,
    FCD.CREATED_DATE AS PAID_DATE,
    '' AS NO_OF_REMINDERS,  -- Placeholder, as MSSQL does not support direct equivalent for dynamic reminder calculation in select
    '' AS FIRST_REMINDER_DATE, -- Placeholder
    '' AS LAST_REMINDER_DATE, -- Placeholder
    B.PA_REFID,
    C.BILLING_MONTH,
    C.BILLING_YEAR,       
    B.CREATED_DATE AS BILLING_DATE
FROM FMS_PA_BILLING_DETAILS A
INNER JOIN FMS_PA_HEADER B ON A.PA_REFID = B.PA_REFID
INNER JOIN FMS_PA_DETAILS C ON B.PA_REFID = C.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS D ON D.PA_REFID = C.PA_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS E ON D.RS_REFID = E.RS_REFID
LEFT OUTER JOIN FMS_COLLECTION_HEADER FCH ON FCH.PA_REFID = B.PA_REFID
LEFT OUTER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
WHERE B.PAYMENT_TYPE = 'CD' AND C.DUE_AMOUNT > 0 AND B.STATUS != 'I';"

}

{
index:39,
ViewName : "FMSV_CDB_SUMMARY_REPORT",

MigQuery:"SELECT 
    AGENCY_CODE,
    SOURCE_SYSTEM,
    BILLED_AMOUNT,
    PENDING_AMOUNT,
    OUTSTANDING_AMOUNT,
    BILLING_DATE
FROM (
    SELECT 
        E.AGENCY_CODE,
        A.SOURCE_SYSTEM,
        C.DUE_AMOUNT AS BILLED_AMOUNT,
        CASE 
            WHEN C.DUE_DATE > GETDATE() THEN (C.DUE_AMOUNT - ISNULL(FCD.PAYMENT_AMOUNT, 0)) 
            ELSE 0.0 
        END AS PENDING_AMOUNT,
        CASE 
            WHEN C.DUE_DATE <= GETDATE() THEN (C.DUE_AMOUNT - ISNULL(FCD.PAYMENT_AMOUNT, 0)) 
            ELSE 0.0 
        END AS OUTSTANDING_AMOUNT,
        ISNULL(C.UPDATED_DATE, C.CREATED_DATE) AS BILLING_DATE
    FROM FMS_PA_BILLING_DETAILS A
    INNER JOIN FMS_PA_HEADER B ON A.PA_REFID = B.PA_REFID
    INNER JOIN FMS_PA_DETAILS C ON B.PA_REFID = C.PA_REFID
    INNER JOIN FMS_PA_RESPONDENTS D ON D.PA_REFID = C.PA_REFID
    INNER JOIN FMS_RESPONDENTS_DETAILS E ON D.RS_REFID = E.RS_REFID
    LEFT OUTER JOIN FMS_COLLECTION_HEADER FCH ON FCH.PA_REFID = B.PA_REFID
    LEFT OUTER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
    WHERE B.PAYMENT_TYPE = 'CD'
) AS SummaryReport;"
}
{

index:40,
ViewName : "FMSV_CDB_SUMMARY_REPORT_TMP",
MigQuery:"SELECT 
    AGENCY_CODE,
    SOURCE_SYSTEM,
    BILLED_AMOUNT,
    PENDING_AMOUNT,
    OUTSTANDING_AMOUNT,
    BILLING_DATE
FROM (
    SELECT 
        E.AGENCY_CODE,
        A.SOURCE_SYSTEM,
        C.DUE_AMOUNT AS BILLED_AMOUNT,
        -- Adjust for MSSQL syntax for conditional logic and date comparison
        CASE 
            WHEN C.DUE_DATE > GETDATE() THEN (C.DUE_AMOUNT - ISNULL(FCD.PAYMENT_AMOUNT, 0)) 
            ELSE 0 
        END AS PENDING_AMOUNT,
        CASE 
            WHEN C.DUE_DATE <= GETDATE() THEN (C.DUE_AMOUNT - ISNULL(FCD.PAYMENT_AMOUNT, 0)) 
            ELSE 0 
        END AS OUTSTANDING_AMOUNT,
        ISNULL(C.UPDATED_DATE, C.CREATED_DATE) AS BILLING_DATE
    FROM FMS_PA_BILLING_DETAILS A
    INNER JOIN FMS_PA_HEADER B ON A.PA_REFID = B.PA_REFID
    INNER JOIN FMS_PA_DETAILS C ON B.PA_REFID = C.PA_REFID
    INNER JOIN FMS_PA_RESPONDENTS D ON D.PA_REFID = C.PA_REFID
    INNER JOIN FMS_RESPONDENTS_DETAILS E ON D.RS_REFID = E.RS_REFID
    LEFT OUTER JOIN FMS_COLLECTION_HEADER FCH ON FCH.PA_REFID = B.PA_REFID
    LEFT OUTER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
    WHERE B.PAYMENT_TYPE = 'CD'
) AS SummaryReport;"

      )

}

{

index:41,
ViewName : "FMSV_CDB_YEARLY_REPORT",
MigQuery: "SELECT 
    AGENCY_CODE,
    SOURCE_SYSTEM,
    BILLING_YEAR,
    SUM(ISNULL(JAN, 0)) AS AMOUNT_IN_JAN,
    SUM(ISNULL(FEB, 0)) AS AMOUNT_IN_FEB,
    -- Continue for other months...
FROM 
    (SELECT 
        D.AGENCY_CODE, 
        E.SOURCE_SYSTEM,
        B.BILLING_YEAR,
        CASE WHEN B.BILLING_MONTH = 1 THEN A.TOTAL_AMOUNT ELSE 0 END AS JAN,
        CASE WHEN B.BILLING_MONTH = 2 THEN A.TOTAL_AMOUNT ELSE 0 END AS FEB,
        -- Continue for other months...
    FROM FMS_PA_HEADER A 
    INNER JOIN FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
    INNER JOIN FMS_PA_RESPONDENTS C ON C.PA_REFID = A.PA_REFID   
    INNER JOIN FMS_RESPONDENTS_DETAILS D ON D.RS_REFID = C.RS_REFID
    INNER JOIN FMS_PA_BILLING_DETAILS E ON E.PA_REFID = B.PA_REFID 
    WHERE A.PAYMENT_TYPE = 'CD' AND A.STATUS != 'I'
    )
GROUP BY AGENCY_CODE, SOURCE_SYSTEM, BILLING_YEAR;
"

}

{

index:42,
ViewName : "FMSV_CHEQUE_BOUNCE_REPORT",
MigQuery: "SELECT 
    FCD.BANK_REFERENCE, 
    FCD.PAYMENT_AMOUNT, 
    FCD.BANK_CODE, 
    FRD.RS_NAME, 
    FRD.RS_ID_NUMBER, 
    FPR.PA_REFID, 
    FCD.IS_FAILED,
    FCD.IS_MADE_GOOD, 
    FCH.COL_REFID, 
    FPR.RS_TYPE 
FROM FMS_COLLECTION_DETAILS FCD
INNER JOIN FMS_COLLECTION_HEADER FCH ON FCH.COL_REFID = FCD.COL_REFID
INNER JOIN FMS_PA_RESPONDENTS FPR ON FPR.PA_REFID = FCH.PA_REFID 
INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FPR.RS_REFID
WHERE IS_FAILED = 'Y' AND IS_MADE_GOOD IS NULL
AND RS_TYPE = 'ACC' AND PAYMENT_AMOUNT > 0;"


}

{

index:43,
ViewName : "FMSV_CJTS2FMS_RECON_REPORT",
MigQuery:"SELECT 
    -- CJTS Columns --
    STG.RECON_REFID, 
    STG.PAYMENT_REFERENCE AS CJTS_REFERENCE_NO, 
    -- FMS Columns --
    FCD.PA_REFID, 
    FCD.PAYMENT_TYPE, 
    FCD.RECIEPT_NUMBER, 
    FCD.TRANSACTION_AMOUNT, 
    FCD.TRANSACTION_DATETIME
FROM FMS_CJTS_RECON_INPUTS_STG STG
LEFT OUTER JOIN FMSV_RECON_RECEIPT_DETAILS_1 FCD ON FCD.RECIEPT_NUMBER = STG.RECEIPT_NUMBER
WHERE STG.RECORD_INDICATOR = 'I' AND STG.STATUS = 'A'
ORDER BY STG.RECEIPT_NUMBER;"

}

{

index:44,
ViewName : "FMSV_COLLECTION_DETAILS",
MigQuery:"SELECT INST_PA_REFID,SUM(PAYMENT_AMOUNT) PAID_AMOUNT,MAX(RECIEPT_NUMBER) RECIEPT_NUMBER  
,MAX(COLLECTION_DATE)COLLECTION_DATE FROM FMSV_COLLECTION_HEADER FCH   
INNER JOIN FMS_COLLECTION_DETAILS  FCD ON FCH.COL_REFID=FCD.COL_REFID   
WHERE NVL(IS_VOID,'N')!='Y' GROUP BY INST_PA_REFID"

}

{

index:45,
ViewName : "FMSV_COLLECTION_DETAILS_EDC",
MigQuery:"SELECT INST_PA_REFID,
    SUM(PAYMENT_AMOUNT) PAID_AMOUNT,
    MAX(RECIEPT_NUMBER) RECIEPT_NUMBER ,
    MAX(COLLECTION_DATE)COLLECTION_DATE,
    MAX(FCH.COL_REFID) COL_REFID
  FROM FMSV_COLLECTION_HEADER FCH
  INNER JOIN FMS_COLLECTION_DETAILS FCD
  ON FCH.COL_REFID       =FCD.COL_REFID
  WHERE ISNULL((IS_VOID,'N')!='Y'
  AND ISNULL((IS_FAILED,'N')!='Y'
  GROUP BY INST_PA_REFID;"
}

{

index:46,
ViewName : "FMSV_COLLECTION_HEADER",
MigQuery: "SELECT FCH.COL_REFID,FPD.PA_REFID,MAP.INST_PA_REFID,FCH.INST_PA_REFID AS PARENT_INST, 
FCH.AMOUNT_RECIEVED,FCH.COLLECTION_DATE,FCH.GST_APPLICABLE,   
FCH.GST_PERCENT,FCH.GST_AMOUNT,FCH.INTEREST_PERCENT,FCH.INTEREST_AMOUNT,FCH.PAYABLE_AMOUNT,FCH.RECIEPT_NUMBER, 
FCH.CREATED_BY,FCH.CREATED_DATE,FCH.UPDATED_BY,FCH.UPDATED_DATE,   
FCH.IS_VOID,FCH.REMARKS,FCH.PAYER_RS_REFID,FCH.GST_INCLUSIVE,FPD.DUE_AMOUNT  
FROM FMS_PA_COLLECTION_MAP MAP 
INNER JOIN FMS_COLLECTION_HEADER FCH ON FCH.COL_REFID = MAP.COL_REFID
INNER JOIN FMSV_COLLECTION_HEADER_FILTER FCF ON FCF.COL_REFID = MAP.COL_REFID
INNER JOIN FMS_PA_DETAILS FPD ON MAP.INST_PA_REFID = FPD.INST_PA_REFID"

}

{

index:47,
ViewName : "FMSV_COLLECTION_HEADER_FILTER",

MigQuery: "SELECT COL_REFID 
FROM FMS_COLLECTION_HEADER 
WHERE 1=1
  AND ( 
    RECIEPT_NUMBER NOT LIKE '%ACK%' 
    OR ( 
      (CAST(GETDATE() AS DATE) - CAST(CREATED_DATE AS DATE)) = 0 
      AND RECIEPT_NUMBER LIKE '%ACK%' 
    ) 
  )
  AND ( 
    RECIEPT_NUMBER NOT LIKE '%PART%' 
    OR ( 
      (CAST(GETDATE() AS DATE) - CAST(CREATED_DATE AS DATE)) = 0 
      AND RECIEPT_NUMBER LIKE '%PART%' 
    ) 
  )
  AND ISNULL(IS_VOID, 'N') NOT IN ('R','T');"
}

{

index:48,

ViewName : "FMSV_COLLECTION_HEADER_RCPT",

MigQuery: "SELECT FCH.COL_REFID,FPD.PA_REFID,MAP.INST_PA_REFID,FCH.INST_PA_REFID AS PARENT_INST, 
FCH.AMOUNT_RECIEVED,FCH.COLLECTION_DATE,FCH.GST_APPLICABLE,   
FCH.GST_PERCENT,FCH.GST_AMOUNT,FCH.INTEREST_PERCENT,FCH.INTEREST_AMOUNT,FCH.PAYABLE_AMOUNT,FCH.RECIEPT_NUMBER, 
FCH.CREATED_BY,FCH.CREATED_DATE,FCH.UPDATED_BY,FCH.UPDATED_DATE,   
FCH.IS_VOID,FCH.REMARKS,FCH.PAYER_RS_REFID,FCH.GST_INCLUSIVE,FPD.DUE_AMOUNT  
FROM FMS_PA_COLLECTION_MAP MAP 
INNER JOIN FMS_COLLECTION_HEADER FCH ON FCH.COL_REFID = MAP.COL_REFID
INNER JOIN FMS_PA_DETAILS FPD ON MAP.INST_PA_REFID = FPD.INST_PA_REFID;"

}

{

index:49,
ViewName : "FMSV_COLLECTION_PAYMENTS_SUMRY",
MigQuery:"SELECT 
    COL_REFID, 
    TRANSACTION_TYPE, 
    MAX(TRANSACTION_REFERENCE) AS TRANSACTION_REFERENCE,
    SUM(TRANSACTION_AMOUNT) AS TRANSACTION_AMOUNT, 
    MAX(CREATED_DATE) AS CREATED_DATE
FROM 
    FMS_COLLECTION_PAYMENTS 
GROUP BY 
    COL_REFID, TRANSACTION_TYPE;"

}

{

index:50,
ViewName : "FMSV_COLLECTIONS_4CJTS_RECON",
MigQuery: "SELECT 
    FPH.PA_REFID, 
    FPH.PAYMENT_TYPE, 
    FCH.RECIEPT_NUMBER, 
    SUM(FCD.PAYMENT_AMOUNT) AS PAYMENT_AMOUNT, 
    FCH.CREATED_BY AS CASHIER, 
    FCH.CREATED_DATE AS TRANSACTION_DATETIME, 
    ISNULL(FCH.IS_VOID, 'N') AS IS_VOID,
    ISNULL(FPD.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM
FROM 
    FMS_PA_HEADER FPH
INNER JOIN 
    FMS_PA_DETAILS FPD ON FPH.PA_REFID = FPD.PA_REFID AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
INNER JOIN 
    FMS_COLLECTION_HEADER FCH ON FPH.PA_REFID = FCH.PA_REFID
INNER JOIN 
    FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCD.COL_REFID
WHERE 
    ISNULL(FPD.SOURCE_SYSTEM, 'FMS') = 'CJTS'
GROUP BY 
    FPH.PA_REFID, FPH.PAYMENT_TYPE, FCH.RECIEPT_NUMBER, FCH.CREATED_BY, FCH.CREATED_DATE, ISNULL(FCH.IS_VOID, 'N'), FPD.SOURCE_SYSTEM;"
}

{

index:51,
ViewName : "FMSV_COLLECTIONS_4CJTS_RECON_1",

MigQuery:"SELECT 
    FCH.INST_PA_REFID, 
    FCH.RECIEPT_NUMBER,
    SUM(FCD.PAYMENT_AMOUNT) AS PAID_AMOUNT,
    MAX(FCH.COLLECTION_DATE) AS COLLECTION_DATE,
    MAX(FCH.COL_REFID) AS COL_REFID
FROM 
    FMSV_COLLECTION_HEADER FCH
INNER JOIN 
    FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCD.COL_REFID
WHERE 
    ISNULL(FCH.IS_VOID, 'N') != 'Y' AND ISNULL(FCD.IS_FAILED, 'N') != 'Y'
GROUP BY 
    FCH.INST_PA_REFID, FCH.RECIEPT_NUMBER;"

}

{

index:52,
ViewName : "FMSV_COLLECTIONS_4CJTS_RECON_2",
MigQuery: "SELECT 
    FCH.INST_PA_REFID, 
    FCH.RECIEPT_NUMBER,
    SUM(FCD.PAYMENT_AMOUNT) AS PAID_AMOUNT,
    MAX(FCH.COLLECTION_DATE) AS COLLECTION_DATE,
    MAX(FCH.COL_REFID) AS COL_REFID
FROM 
    FMSV_COLLECTION_HEADER FCH
INNER JOIN 
    FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCD.COL_REFID
INNER JOIN 
    FMS_COLLECTION_2_UPDT_INF_SYS FCU ON FCH.COL_REFID = FCU.COL_REFID AND ISNULL(FCU.IS_VOID, 'N') = 'N'
WHERE 
    ISNULL(FCH.IS_VOID, 'N') != 'Y' AND ISNULL(FCD.IS_FAILED, 'N') != 'Y'
GROUP BY 
    FCH.INST_PA_REFID, FCH.RECIEPT_NUMBER;"
}

{

index:53,
ViewName : "FMSV_CONSOLID_NOTIFICATIONS",

MigQuery:"SELECT 
    REFERENCE_ID,
    PAYMENT_TYPE, 
    ASSIGNED_TO_USER, 
    COURT_NUMBER 
FROM 
    FMS_NOTIFICATION_PROCESS 
WHERE 
    STATUS != 'CLS'
GROUP BY 
    REFERENCE_ID, PAYMENT_TYPE, ASSIGNED_TO_USER, COURT_NUMBER
ORDER BY 
    REFERENCE_ID;"
}

{

index:54,
ViewName : "FMSV_CP_DASHBOARD",
MigQuery: "SELECT 
    A.PA_REFID AS PA_REFID,
    BILLING_TYPE,
    D.RS_NAME AS RS_NAME,
    D.RS_EMP_NAME AS ORGANIZATION_NAME,
    D.RS_VEHICLE_NUMBER AS RS_VEHICLE_NUMBER,
    RS_IU_NUMBER,
    A.CREATED_DATE,
    B.DUE_AMOUNT AS DUE_AMOUNT,
    B.DUE_DATE AS DUE_DATE,
    ISNULL(RECIEPT_NUMBER, 'PENDING') AS STATUS,
    COLLECTION_DATE,
    PAYMENT_TYPE
FROM 
    FMS_PA_HEADER A
INNER JOIN 
    FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
INNER JOIN 
    FMS_PA_RESPONDENTS C ON C.PA_REFID = B.PA_REFID
INNER JOIN 
    FMS_RESPONDENTS_DETAILS D ON C.RS_REFID = D.RS_REFID
LEFT JOIN 
    FMSV_COLLECTION_HEADER E ON E.INST_PA_REFID = B.INST_PA_REFID
WHERE 
    A.PAYMENT_TYPE IN ('CP', 'RU', 'IS') AND STATUS NOT IN ('I');"

}

{

index:55,
ViewName : "FMSV_DAILY_COLLECTION_SUMMARY",
MigQuery:"SELECT 
    FPH.PA_REFID AS INST_PA_REFID, 
    FPH.PAYMENT_TYPE,
    FPH.CASE_ID,
    FPH.COURT_NUMBER,
    FRD.RS_NAME, 
    FRD.RS_ID_NUMBER, 
    FCH.RECIEPT_NUMBER,
    FCD.PAYMENT_MODE, 
    FCD.PAYMENT_AMOUNT,
    IS_VOID, 
    FCH.COLLECTION_DATE,
    FCH.CREATED_DATE AS TRANSACTION_DATE,
    FORMAT(FCH.CREATED_DATE, 'dd/MM/yyyy') AS PAYMENT_DATE,
    FORMAT(FCH.CREATED_DATE, 'hh:mm tt') AS PAYMENT_TIME,
    FORMAT(FCH.CREATED_DATE, 'HH:mm:ss tt') AS PAYMENT_TIME1, 
    FORMAT(FCH.CREATED_DATE, 'HH:mm') AS PAYMENT_TIME_24HR,
    UPPER(FCH.CREATED_BY) AS CASHIER,
    FCH.COL_REFID,
    FPH.SOURCE_SYSTEM
FROM 
    FMSV_PA_INFO FPH
INNER JOIN 
    FMS_COLLECTION_HEADER FCH ON FCH.PA_REFID = FPH.PA_REFID
INNER JOIN 
    FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
INNER JOIN 
    FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FCH.PAYER_RS_REFID
WHERE 
    FCD.PAYMENT_MODE NOT IN ('eNets', 'AXS', 'PAYNOW');"

}

{

index:56,
ViewName : "FMSV_DAILY_COLLECTION_SUMMARYB",
MigQuery:"SELECT 
    FPD.INST_PA_REFID,
    FPH.PAYMENT_TYPE,
    FCM.CASE_ID,
    FCM.COURT_NUMBER,
    FRD.RS_NAME,
    FRD.RS_ID_NUMBER,
    FCH.RECIEPT_NUMBER,
    FCD.PAYMENT_MODE,
    FCD.PAYMENT_AMOUNT,
    ISNULL(FCH.IS_VOID, 'N') AS IS_VOID,
    FORMAT(FCH.CREATED_DATE, 'dd/MM/yyyy') AS PAYMENT_DATE,
    FORMAT(FCH.CREATED_DATE, 'hh:mm tt') AS PAYMENT_TIME,
    FORMAT(FCH.CREATED_DATE, 'HH:mm') AS PAYMENT_TIME_24HR,
    FCH.CREATED_BY AS CASHIER
FROM 
    FMS_PA_HEADER FPH
INNER JOIN 
    FMS_PA_DETAILS FPD ON FPH.PA_REFID = FPD.PA_REFID
INNER JOIN 
    FMSV_COLLECTION_HEADER FCH ON FCH.INST_PA_REFID = FPD.INST_PA_REFID
INNER JOIN 
    FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
INNER JOIN 
    FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FCH.PAYER_RS_REFID
LEFT OUTER JOIN 
    FMS_CASE_DETAILS FCM ON FPH.CASE_REFID = FCM.CASE_REFID;"

}

{

index:56,

ViewName : "FMSV_DC_ACCOUNT_SUMMARY",

MigQuery: "SELECT CDR_REFID,
    PAYMENT_GROUP_VITAL,
    ACCOUNT_CODE,
    CASE 
        WHEN SUB_ACCOUNT_CODE IN ('NA', '-') THEN '' 
        ELSE SUB_ACCOUNT_CODE 
    END AS SUB_ACCOUNT_CODE,
    COST_CENTRE,
    GST_ACCOUNT,
    PAYMENT_TYPE,
    SUM(PAYMENT_AMOUNT) AS PAYMENT_AMOUNT,
    SUM(GST_AMOUNT) AS GST_AMOUNT,
    REMARKS
FROM
    (SELECT CDR_REFID,
        DPM.PAYMENT_GROUP_VITAL,
        DPM.ACCOUNT_CODE,
        DPM.SUB_ACCOUNT_CODE,
        DPM.COST_CENTRE,
        DPM.GST_ACCOUNT,
        DPM.PAYMENT_TYPE,
        DPM.PAYMENT_AMOUNT,
        DPM.GST_AMOUNT,
        '' AS REMARKS
    FROM FMSV_DC_PAYMENT_SUMMARY DPM
    INNER JOIN FMS_CD_REVENUE_LINE_DETAILS RLD
    ON DPM.PAYMENT_MODE = RLD.MODE_OF_COLLECTION
    AND FORMAT(DPM.PAYMENT_DATE, 'yyyyMMddHHmm') >= CONCAT(FORMAT(REP_FROM_DATE, 'yyyyMMdd'), REPLACE(REP_FROM_TIME, ':', ''))
    AND FORMAT(DPM.PAYMENT_DATE, 'yyyyMMddHHmm') <= CONCAT(FORMAT(REP_TO_DATE, 'yyyyMMdd'), REPLACE(REP_TO_TIME, ':', ''))
    UNION ALL
    SELECT CDR_REFID,
        MODE_OF_COLLECTION AS PAYMENT_GROUP_VITAL,
        ACCOUNT_NO AS ACCOUNT_CODE,
        SUBACCOUNT_NO AS SUB_ACCOUNT_CODE,
        COST_CENTER AS COST_CENTRE,
        '' AS GST_ACCOUNT,
        DESCRIPTION AS PAYMENT_TYPE,
        AMOUNT AS PAYMENT_AMOUNT,
        0 AS GST_AMOUNT,
        REMARKS
    FROM FMS_CD_REVENUE_GIRO_LINE
    WHERE MODE_OF_COLLECTION IS NOT NULL
    ) A
GROUP BY CDR_REFID,
    PAYMENT_GROUP_VITAL,
    ACCOUNT_CODE,
    SUB_ACCOUNT_CODE,
    COST_CENTRE,
    GST_ACCOUNT,
    PAYMENT_TYPE,
    REMARKS;"

}

{

index:57,
ViewName : "FMSV_DC_ACCOUNT_SUMMARY1",

MigQuery:"SELECT CDR_REFID,
    PAYMENT_GROUP_VITAL,
    ACCOUNT_CODE,
    CASE WHEN SUB_ACCOUNT_CODE = 'NA' THEN '' ELSE SUB_ACCOUNT_CODE END AS SUB_ACCOUNT_CODE,
    COST_CENTRE,
    PAYMENT_TYPE,
    SUM(PAYMENT_AMOUNT) AS PAYMENT_AMOUNT,
    REMARKS
FROM
(
    SELECT CDR_REFID,
        DPM.PAYMENT_GROUP_VITAL,
        DPM.ACCOUNT_CODE,
        DPM.SUB_ACCOUNT_CODE,
        DPM.COST_CENTRE,
        DPM.PAYMENT_TYPE,
        DPM.PAYMENT_AMOUNT,
        '' AS REMARKS
    FROM FMSV_DC_PAYMENT_SUMMARY DPM
    INNER JOIN FMS_CD_REVENUE_LINE_DETAILS RLD
    ON DPM.PAYMENT_MODE = RLD.MODE_OF_COLLECTION
    AND FORMAT(DPM.PAYMENT_DATE, 'yyyyMMddHHmm') >= CONCAT(FORMAT(RLD.REP_FROM_DATE, 'yyyyMMdd'), REPLACE(RLD.REP_FROM_TIME, ':', ''))
    AND FORMAT(DPM.PAYMENT_DATE, 'yyyyMMddHHmm') <= CONCAT(FORMAT(RLD.REP_TO_DATE, 'yyyyMMdd'), REPLACE(RLD.REP_TO_TIME, ':', ''))
    UNION ALL
    SELECT CDR_REFID,
        MODE_OF_COLLECTION AS PAYMENT_GROUP_VITAL,
        ACCOUNT_NO AS ACCOUNT_CODE,
        SUBACCOUNT_NO AS SUB_ACCOUNT_CODE,
        COST_CENTER AS COST_CENTRE,
        DESCRIPTION AS PAYMENT_TYPE,
        AMOUNT AS PAYMENT_AMOUNT,
        REMARKS
    FROM FMS_CD_REVENUE_GIRO_LINE
    WHERE MODE_OF_COLLECTION IS NOT NULL
) A
GROUP BY CDR_REFID, PAYMENT_GROUP_VITAL, ACCOUNT_CODE, SUB_ACCOUNT_CODE, COST_CENTRE, PAYMENT_TYPE, REMARKS;"
}

{

index:58,
ViewName : "FMSV_DC_PAYMENT_SUMMARY",
MigQuery:"SELECT FCH.CREATED_DATE AS PAYMENT_DATE,
    FPH.PAYMENT_TYPE,
    FCH.RECIEPT_NUMBER,
    FCD.PAYMENT_MODE,
    FCD.PAYMENT_AMOUNT,
    FCH.GST_AMOUNT,
    PGM.PAYMENT_GROUP_VITAL,
    ISNULL(FPH.ACCOUNT_NUMBER, PAM.ACCOUNT_CODE) AS ACCOUNT_CODE,
    ISNULL(FPH.SUBACCOUNT_NUMBER, PAM.SUB_ACCOUNT_CODE) AS SUB_ACCOUNT_CODE,
    ISNULL(FPH.COST_CENTER, PAM.COST_CENTRE) AS COST_CENTRE,
    ISNULL(FPH.GST_ACCOUNT, '') AS GST_ACCOUNT
FROM FMS_COLLECTION_HEADER FCH
INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
INNER JOIN FMS_PA_HEADER FPH ON FCH.PA_REFID = FPH.PA_REFID
INNER JOIN FMS_PM_GROUP_MASTER PGM ON FCD.PAYMENT_MODE = PGM.PAYMENT_MODE
INNER JOIN FMS_PAYMENTTYPE_AC_MASTER PAM ON PAM.PAYMENT_TYPE = FPH.PAYMENT_TYPE
WHERE ISNULL(FCH.IS_VOID, 'N') != 'Y';"


}

{

index:59,
ViewName : "FMSV_DEFAULTED_MI_PAYMENTS",
MigQuery: "SELECT A.PA_REFID,
    A.PAYMENT_TYPE,
    A.TERMINATION_ID,
    A.TOTAL_AMOUNT,
    A.STATUS,
    A.CREATED_BY,
    B.DUE_AMOUNT,
    B.DUE_DATE,
    D.RS_ID_NUMBER,
    D.RS_NAME,
    D.RS_EMAIL,
    E.PAID_AMOUNT,
    E.COLLECTION_DATE,
    E.RECIEPT_NUMBER,
    (B.DUE_AMOUNT - ISNULL(B.GST_AMOUNT, 0) - ISNULL(E.PAID_AMOUNT, 0)) AS BALANCE_AMOUNT,
    DATEDIFF(DAY, B.DUE_DATE, GETDATE()) AS PENDING_DAYS,
    ISNULL(B.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM
FROM FMS_PA_HEADER A
INNER JOIN FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS C ON C.PA_REFID = B.PA_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS D ON C.RS_REFID = D.RS_REFID
LEFT OUTER JOIN FMSV_COLLECTION_DETAILS E ON E.INST_PA_REFID = B.INST_PA_REFID
WHERE A.PAYMENT_TYPE IN ('CC', 'MI', 'MS', 'RD', 'CT')
AND A.STATUS NOT IN ('I')
AND DATEDIFF(DAY, B.DUE_DATE, GETDATE()-1) >= 0
AND (B.DUE_AMOUNT - ISNULL(B.GST_AMOUNT, 0) - ISNULL(E.PAID_AMOUNT, 0)) > 0;"
}

{

index:60,
ViewName : "FMSV_DEFAULTED_OTHER_PAYMENTS",
MigQuery:"SELECT A.PA_REFID,
    A.PAYMENT_TYPE,
    A.TERMINATION_ID,
    A.TOTAL_AMOUNT,
    A.STATUS,
    A.CREATED_BY,
    B.DUE_AMOUNT,
    B.DUE_DATE,
    D.RS_ID_NUMBER,
    D.RS_NAME,
    D.RS_EMAIL,
    E.PAID_AMOUNT,
    E.COLLECTION_DATE,
    E.RECIEPT_NUMBER,
    (B.DUE_AMOUNT - ISNULL(B.GST_AMOUNT, 0) - ISNULL(E.PAID_AMOUNT, 0)) AS BALANCE_AMOUNT,
    DATEDIFF(DAY, B.DUE_DATE, GETDATE()) AS PENDING_DAYS,
    ISNULL(B.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM
FROM FMS_PA_HEADER A
INNER JOIN FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS C ON C.PA_REFID = B.PA_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS D ON C.RS_REFID = D.RS_REFID
LEFT OUTER JOIN FMSV_COLLECTION_DETAILS E ON E.INST_PA_REFID = B.INST_PA_REFID
WHERE A.PAYMENT_TYPE IN ('CC', 'MI', 'MS', 'RD', 'CT')
AND A.STATUS NOT IN ('I')
AND (DATEDIFF(DAY, B.DUE_DATE, GETDATE()) - 1) >= 0
AND ((B.DUE_AMOUNT - ISNULL(B.GST_AMOUNT,0)) - ISNULL(E.PAID_AMOUNT,0)) > 0;"
}

{

index:61,
ViewName : "FMSV_DEPOSIT_CREATION_MATRIX",
MigQuery: "SELECT PAYMENT_DATE, CASHIER, PAYMENT_TYPE, B.PAYMENT_MODE, COLLECTION_DATE,
    PAYMENT_AMOUNT, PAYMENT_TIME, PAYMENT_TIME_24HR, RECIEPT_NUMBER, TRANSACTION_DATE,
    CASE WHEN PAYMENT_GROUP_DC = 'Cash' THEN PAYMENT_AMOUNT ELSE 0.0 END AS CASH_AMT,
    CASE WHEN PAYMENT_GROUP_DC = 'Cash' THEN 1 ELSE 0 END AS CASH_TRANS,
    CASE WHEN PAYMENT_GROUP_DC = 'Cheque' THEN PAYMENT_AMOUNT ELSE 0.0 END AS CHEQUE_AMT,
    CASE WHEN PAYMENT_GROUP_DC = 'Cheque' THEN 1 ELSE 0 END AS CHEQUE_TRANS,
    -- Continue for other payment types
FROM FMSV_DAILY_COLLECTION_SUMMARY A
INNER JOIN FMS_PM_GROUP_MASTER B ON A.PAYMENT_MODE = B.PAYMENT_MODE
WHERE ISNULL(IS_VOID, 'N') != 'Y' AND ISNULL(IS_VOID, 'N') != 'T';"


}

{

index:62,
ViewName : "FMSV_DEPOSIT_CREATION_MATRIX_E",
MigQuery: "SELECT PAYMENT_DATE,
    CASHIER,
    PAYMENT_TYPE,
    B.PAYMENT_MODE,
    PAYMENT_AMOUNT,
    PAYMENT_TIME,
    PAYMENT_TIME_24HR,
    COLLECTION_DATE,
    RECIEPT_NUMBER,
    TRANSACTION_DATE, -- added new
    CASE WHEN PAYMENT_GROUP_DC = 'Bail Transfer' THEN PAYMENT_AMOUNT ELSE 0.0 END AS BO_AMT,
    CASE WHEN PAYMENT_GROUP_DC = 'Bail Transfer' THEN 1 ELSE 0 END AS BO_TRANS,
    CASE WHEN PAYMENT_GROUP_DC = 'Offset Cash Bail' THEN PAYMENT_AMOUNT ELSE 0.0 END AS OCB_AMT,
    -- Continue with other CASE statements as per original query
FROM FMSV_DAILY_COLLECTION_SUMMARY A
INNER JOIN FMS_PM_GROUP_MASTER B ON A.PAYMENT_MODE = B.PAYMENT_MODE
WHERE ISNULL(IS_VOID, 'N') != 'Y';"

}

{

index:63,
ViewName : "FMSV_DEPOSIT_CREATION_QUERY",
MigQuery: "SELECT PAYMENT_DATE,CASHIER,PAYMENT_TYPE,
SUM(CASH_AMT) AS CASH_AMOUNT,
SUM(CASH_TRANS) AS CASH_TRANS,
SUM(CHEQUE_AMT) AS CHEQUE_AMT,
SUM(CHEQUE_TRANS) AS CHEQUE_TRANS,
SUM(NETS_AMT) AS NETS_AMT,
SUM(NETS_TRANS) AS NETS_TRANS,
SUM(CREDITCARD_AMT) AS CREDITCARD_AMT,
SUM(CREDITCARD_TRANS) AS CREDITCARD_TRANS,
SUM(CASHCARD_AMT) AS CASHCARD_AMT,
SUM(CASHCARD_TRANS) AS CASHCARD_TRANS,
SUM(CASHIERORDER_AMT) AS CASHIERORDER_AMT,
SUM(CASHIERORDER_TRANS) AS CASHIERORDER_TRANS,
SUM(GIRO_AMT) AS GIRO_AMT,
SUM(GIRO_TRANS) AS GIRO_TRANS,
SUM(CASH_AMT)+SUM(CHEQUE_AMT)+SUM(NETS_AMT)+SUM(CREDITCARD_AMT)+SUM(CASHCARD_AMT)+SUM(CASHIERORDER_AMT)+SUM(GIRO_AMT) AS TOTAL_AMOUNT,
SUM(CASH_TRANS)+SUM(CHEQUE_TRANS)+SUM(NETS_TRANS)+SUM(CREDITCARD_TRANS)+SUM(CASHCARD_TRANS)+SUM(CASHIERORDER_TRANS)+SUM(GIRO_TRANS) AS TOTAL_TRANS
FROM FMSV_DEPOSIT_CREATION_MATRIX
GROUP BY PAYMENT_DATE,CASHIER,PAYMENT_TYPE;"

}

{

index:64,
ViewName : "FMSV_DISHONOUR_PAYMENTS_REPORT",

MigQuery: "SELECT A.COLLECTION_DATE,
    A.RECIEPT_NUMBER,
    A.PA_REFID,
    B.BANK_CODE,
    B.BANK_REFERENCE,
    B.PAYMENT_AMOUNT,
    B.PAYMENT_MODE,
    B.IS_FAILED,
    B.IS_MADE_GOOD,   
    D.RS_NAME,
    D.RS_ID_NUMBER,
    C.RS_TYPE
  FROM FMS_COLLECTION_HEADER A
  INNER JOIN FMS_COLLECTION_DETAILS B
  ON A.COL_REFID = B.COL_REFID
 INNER JOIN FMS_PA_RESPONDENTS C ON A.PA_REFID=C.PA_REFID 
INNER JOIN FMS_RESPONDENTS_DETAILS D ON C.RS_REFID=D.RS_REFID
WHERE  B.IS_FAILED='Y' AND B.IS_MADE_GOOD IS NULL
AND C.RS_TYPE IN ('ACC','PYR') AND B.PAYMENT_AMOUNT > 0;"

}

{

index:65,
ViewName : "FMSV_DOC_REVENUE_RFND_USER_MAP",
MigQuery: "SELECT DISTINCT A.FMS_REFERENCE,
    C.ROLE_ID,
    CASE WHEN C.WF_ACTION_TYPE = 'G' THEN C.USER_ID ELSE B.USER_ID END AS USER_ID
FROM FMS_WORKFLOW_DOCUMENT_MAP A
INNER JOIN FMS_WORKFLOW_ACTIVITIES B ON B.FMS_REFERENCE = A.FMS_REFERENCE
INNER JOIN FMSV_WORKFLOW_USERS C ON C.WORKFLOW_ID IN ('10014', '10015', '20014', '20015')
AND C.ROLE_ID = B.ROLE_ID;"

}

{

index:66,
ViewName : "FMSV_DOCUMENT_USER_MAP",
MigQuery: "SELECT DISTINCT A.FMS_REFERENCE,
    C.ROLE_ID,
    CASE
      WHEN C.WF_ACTION_TYPE = 'G'
      THEN C.USER_ID
      ELSE B.USER_ID
    END AS USER_ID
FROM FMS_WORKFLOW_DOCUMENT_MAP A
INNER JOIN FMS_WORKFLOW_ACTIVITIES B ON B.FMS_REFERENCE = A.FMS_REFERENCE
INNER JOIN FMSV_WORKFLOW_USERS C ON CAST(C.WORKFLOW_ID AS VARCHAR) = CAST(A.WORKFLOW_ID AS VARCHAR)
AND CAST(C.ROLE_ID AS VARCHAR) = CAST(B.ROLE_ID AS VARCHAR);"

}

{

index:67,
ViewName : "FMSV_E_COLLECTION_DETAILS",
MigQuery:"SELECT FPH.PA_REFID AS INST_PA_REFID,
    FPH.PAYMENT_TYPE,
    FPH.CASE_ID,
    FPH.COURT_NUMBER,
    FRD.RS_NAME,
    FRD.RS_ID_NUMBER,
    FCH.RECEIPT_NUMBER,
    FCD.PAYMENT_MODE,
    FCD.PAYMENT_AMOUNT,
    IS_VOID,
    COLLECTION_DATE,
    FCH.CREATED_DATE AS TRANSACTION_DATE,
    FORMAT(FCH.CREATED_DATE, 'dd/MM/yyyy') AS PAYMENT_DATE,
    FORMAT(FCH.CREATED_DATE, 'hh:mm:ss tt') AS PAYMENT_TIME,
    FORMAT(FCH.CREATED_DATE, 'HH:mm') AS PAYMENT_TIME_24HR,
    UPPER(FCH.CREATED_BY) AS CASHIER,
    FCH.COL_REFID,
    FPH.SOURCE_SYSTEM
FROM FMSV_PA_INFO FPH 
INNER JOIN FMS_COLLECTION_HEADER FCH ON FCH.PA_REFID = FPH.PA_REFID
INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCD.COL_REFID = FCH.COL_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FRD.RS_REFID = FCH.PAYER_RS_REFID
WHERE FCD.PAYMENT_MODE IN ('eNets','AXS','PAYNOW');"

}

{

index:68,
ViewName : "FMSV_E_COLLECTIONS_MATRIX",
MigQuery:"SELECT PAYMENT_DATE, CASHIER, PAYMENT_TYPE, B.PAYMENT_MODE, PAYMENT_AMOUNT,
    PAYMENT_TIME, PAYMENT_TIME_24HR, COLLECTION_DATE, TRANSACTION_DATE, RECEIPT_NUMBER,
    CASE WHEN PAYMENT_GROUP_DC = 'Online' THEN PAYMENT_AMOUNT ELSE 0.0 END AS eNETS_AMT,
    CASE WHEN PAYMENT_GROUP_DC = 'Online' THEN 1 ELSE 0 END AS eNETS_TRANS,
    CASE WHEN PAYMENT_GROUP_DC = 'AXS' THEN PAYMENT_AMOUNT ELSE 0.0 END AS AXS_AMT,
    CASE WHEN PAYMENT_GROUP_DC = 'AXS' THEN 1 ELSE 0 END AS AXS_TRANS,
    CASE WHEN PAYMENT_GROUP_DC = 'Pay Now' THEN PAYMENT_AMOUNT ELSE 0.0 END AS PAYNOW_AMT,
    CASE WHEN PAYMENT_GROUP_DC = 'Pay Now' THEN 1 ELSE 0 END AS PAYNOW_TRANS,
    SOURCE_SYSTEM
FROM FMSV_E_COLLECTION_DETAILS A
INNER JOIN FMS_PM_GROUP_MASTER B ON A.PAYMENT_MODE = B.PAYMENT_MODE
WHERE ISNULL(IS_VOID, 'N') != 'Y' AND PAYMENT_GROUP_DC IN ('Online', 'AXS', 'Pay Now');"

}

{

index:69,
ViewName : "FMSV_E_INVOICE_REPORT",

MigQuery: "SELECT A.PAYMENT_TYPE, A.EINVOICE_REFERENCE, A.VENDOR_ID, A.VENDOR_NAME, A.INVOICE_NUMBER, A.INVOICE_DATE, A.DESCRIPTION, A.POWO_NUMBER,
  A.INVOICE_AMOUNT + A.MISC_AMOUNT + A.FREIGHT_AMOUNT AS INVOICE_AMOUNT, A.GST_AMOUNT, A.RDDR_NUMBER, A.PAYMENT_TERMS, A.REMARKS, A.SUB_DATE_VITAL, A.VITAL_PROCESSING_DATE, A.NFS_VOUCHER_NO, A.NFS_PAID_DATE, A.STATUS,
  B.PAYMENT_TYPE AS LINE_DESCRIPTION, B.ACCOUNT_NUMBER, B.SUBACCOUNT_NUMBER, B.COST_CENTER, B.AMOUNT, C.LINE_ID, C.OIC_NAME, C.OIC_DIVISION, C.OIC_DEPARTMENT
FROM FMS_EINVOICE_PAYMENT_DETAILS A
INNER JOIN FMS_EINVOICE_LINE_DETAILS B ON A.EINVOICE_REFERENCE = B.EINVOICE_REFERENCE
INNER JOIN FMS_OIC_DETAILS C ON A.EINVOICE_REFERENCE = C.EINVOICE_REFERENCE WHERE C.LINE_ID = 1
ORDER BY A.EINVOICE_REFERENCE, B.LINE_NUMBER;"

}

{

index:70,

ViewName : "FMSV_FC_DASHBOARD",

MigQuery:"SELECT FC_REFID, 
       FCD.PA_REFID, 
       RD.RS_ID_NUMBER, 
       RD.RS_NAME, 
       CASE 
           WHEN CD.CASE_NO IS NOT NULL THEN CD.CASE_NO
           ELSE CD.CASE_ID
       END AS CASE_ID, 
       CD.COURT_NUMBER, 
       PROCESS_ID, 
       FCD.CREATED_BY, 
       FCD.CREATED_DATE, 
       FCD.UPDATED_DATE, 
       FCD.APPROVAL_CHOICE,
       FCD.CREATED_DATE AS DATE_OF_ORDER  
FROM FMS_FINES_CLINIC_DETAILS FCD 
INNER JOIN FMS_CASE_DETAILS CD ON CD.CASE_REFID = FCD.CASE_REFID 
INNER JOIN FMS_PA_RESPONDENTS PAR ON PAR.PA_REFID = FCD.PA_REFID 
    AND PAR.RS_TYPE = 'ACC' 
INNER JOIN FMS_RESPONDENTS_DETAILS RD ON RD.RS_REFID = PAR.RS_REFID;"

}

{

index:71,
ViewName : "FMSV_FD_BAIL_REPORT",
MigQuery:"SELECT PA_REFID,
    BAILOR_NAME,
    BAILOR_ID,
    RS_NAME,
    RS_ID,
    CASE_ID,
    COURT_NUMBER,
    BOND_ID,
    TRASACTION_AMOUNT,
    STATUS,
    REFUND_STATUS,
    LAST_DATE_OF_REFUND,
    BALANCE_AMOUNT,
    BAIL_OFFERED_DATE,
    BAIL_EXECUTED_DATE,
    RECIEPT_NUMBER,
    TRANSACTION_TYPE,
    TRNF_PA_REFID,
    BAILBOND_TRANS_REFID,
    SOURCE_SYSTEM,
    FD_BANK_CODE,
    FD_ACCOUNT_NUMBER,
    LIEN_REQ_DATE,
    LIEN_DATE,
    BANK_CONFIRMATION_DATE,
    '0' AS LIEN_AMOUNT,
    NEXT_COURT_EVENT_DATE,
    CASE
      WHEN ISNULL(IS_RETURNED, 'N') != 'N'
      THEN RETURNED_DATE
      ELSE NULL
    END AS RELEASED_DATE,
    REMARKS, LETTER_NUMBER
FROM FMSV_BAIL_PA_ENQUIRY
WHERE TRANSACTION_TYPE != 'CASH'"


}

{

index:72,
ViewName : "FMSV_FD_HOME_DASHBOARD",
MigQuery:"SELECT DISTINCT A.PAYMENT_REFERENCE,
    A.PAYMENT_TYPE,
    A.VENDOR_ID,
    A.VENDOR_NAME,
    A.INVOICE_NUMBER,
    A.INVOICE_DATE,
    A.DATE_RECIEVED,
    A.STATUS,
    -- Handle NULLs and default values with ISNULL
    CASE
      WHEN ISNULL(F.RF_AMOUNT,0) != 0
      THEN F.RF_AMOUNT
      ELSE B.AMOUNT
    END AS AMOUNT,
    B.COST_CENTER,
    B.ACCOUNT_NUMBER,
    B.SUBACCOUNT_NUMBER,
    A.CERTIFYING_OFFICER,
    A.CONSOLIDATED,
    C.USER_ID AS PROCESS_OFFICER,
    C.ROLE_ID AS CURRENT_ROLE,
    A.CREATED_BY,
    -- Adjusting NVL to ISNULL
    CASE
      WHEN A.STATUS = 'APP'
      THEN A.STATUS
      ELSE ISNULL(D.ACTION_CODE,'PSUB')
    END AS WF_STATUS,
    SUBMISSION_OFFICER,
    SUBMISSION_DATE,
    G.SOURCE_SYS,
    G.DOCUMENT_NAME
FROM FMS_PV_HEADER A
INNER JOIN FMSV_PV_LINE_DETAILS B ON A.PAYMENT_REFERENCE = B.PAYMENT_REFERENCE
LEFT OUTER JOIN FMSV_FD_LAST_ACTIVITY D ON D.FMS_REFERENCE = A.PAYMENT_REFERENCE
LEFT OUTER JOIN FMS_WORKFLOW_ACTIVITIES C ON C.FMS_REFERENCE = A.PAYMENT_REFERENCE AND C.END_DATE IS NULL
LEFT OUTER JOIN FMSV_WF_SUBMISSION_DETAILS E ON E.FMS_REFERENCE = A.PAYMENT_REFERENCE
LEFT OUTER JOIN FMSV_PV_LINE_DETAILS_CBRF F ON F.PA_REFID = A.PAYMENT_REFERENCE
LEFT OUTER JOIN FMS_REFUND_ORDER_DETAILS G ON G.NFS_VOUCHER_NO = A.PAYMENT_REFERENCE
WHERE 1 = 1
  AND A.STATUS NOT IN ('RSUB','CLS','I')
  AND A.PAYMENT_TYPE != 'PFLI'
  AND ISNULL(A.AUTHORITY_PROCESSED,'Y') != 'N';"

}

{

index:73,
ViewName : "FMSV_FD_LAST_ACTIVITY",
MigQuery:"SELECT FMS_REFERENCE, ROLE_ID, USER_ID, ACTION_CODE 
FROM FMS_WORKFLOW_ACTIVITIES 
WHERE DISPLAY_SEQUENCE IN (
  SELECT MAX(DISPLAY_SEQUENCE) 
  FROM FMS_WORKFLOW_ACTIVITIES
  WHERE END_DATE IS NOT NULL
  GROUP BY FMS_REFERENCE
)"

}

{

index:74,
ViewName : FMSV_FD_LAST_ACTIVITY_DETAILS,
MigQuery:"SELECT 
    A.FMS_REFERENCE, 
    A.ROLE_ID, 
    ISNULL(ROLE_DESCRIPTION, B.ACL_NAME) AS ROLE_DESCRIPTION, 
    A.USER_ID, 
    A.ACTION_CODE, 
    A.COMMENTS, 
    A.START_DATE, 
    A.END_DATE 
FROM 
    FMS_WORKFLOW_ACTIVITIES A 
INNER JOIN 
    FMS_ACL_MASTER B ON A.ROLE_ID = B.ACL_REFID
WHERE 
    A.DISPLAY_SEQUENCE IN (
        SELECT MAX(DISPLAY_SEQUENCE) 
        FROM FMS_WORKFLOW_ACTIVITIES 
        WHERE END_DATE IS NOT NULL 
        GROUP BY FMS_REFERENCE
    )"

}

{

index:75,
ViewName : FMSV_FINES_PA_ENQUIRY,
MigQuery:"SELECT DISTINCT 
    PAH.PA_REFID, 
    RD.RS_ID_NUMBER, 
    RD.RS_NAME, 
    RD.RS_ID_TYPE,
    RD.RS_MOBILE_NUMBER,
    CASE
        WHEN CD.CASE_NO IS NOT NULL
        THEN CD.CASE_NO
        ELSE CD.CASE_ID
    END AS CASE_ID,
    CD.COURT_NUMBER,
    CASE
        WHEN ISNULL(PAH.TERMINATION_STATUS,'N') = 'Y'
        THEN ((PAH.TOTAL_AMOUNT) - (ISNULL(FCD.PAID_AMOUNT,0)))
        ELSE FNC.DUE_AMOUNT
    END AS DUE_AMOUNT,
    FNC.DUE_DATE, 
    DATE_OF_ORDER, 
    JO_ID, 
    CO_ID,
    CASE
        WHEN ISNULL(PAH.INS_AMEND_REQUEST,'N') IN ('SUB','FCP', 'WLK')
        THEN 'APPLICATION IN PROGRESS'
        WHEN ((PAH.TOTAL_AMOUNT) - (ISNULL(FCD.PAID_AMOUNT,0))) = 0
        THEN FCD.RECIEPT_NUMBER
        WHEN ISNULL(PAH.TERMINATION_STATUS,'N') = 'Y'
        THEN 'TERMINATED'
        WHEN CONVERT(VARCHAR, FNC.DUE_DATE, 112) >= CONVERT(VARCHAR, GETDATE(), 112)
        THEN 'PENDING'
        ELSE 'OVER DUE'
    END AS STATUS,
    FCD.RECIEPT_NUMBER AS RECEIPT_NUMBER, 
    ISNULL(PAH.TERMINATION_STATUS,'N') AS TERMINATION_STATUS,
    PAH.WARRANT_TYPE, 
    PAH.WARRANT_NUMBER, 
    PAH.TERMINATION_DATE, 
    PAH.WARRANT_STATUS,
    CASE
        WHEN PAH.UNTERMINATION_DATE IS NULL
        THEN ' '
        ELSE 'Y'
    END AS UNTERMINATION_STATUS,
    PAH.UNTERMINATION_DATE, 
    PAH.TOTAL_AMOUNT AS TOTAL_AMOUNT,
    ((PAH.TOTAL_AMOUNT) - (ISNULL(FCD.PAID_AMOUNT,0))) AS OUTSTANDING_AMOUNT, 
    PAH.REMARKS, 
    ISNULL(PAH.INS_AMEND_REQUEST,'N') AS INS_AMEND_REQUEST
FROM 
    FMS_PA_HEADER PAH
INNER JOIN 
    FMS_CASE_DETAILS CD ON CD.CASE_REFID = PAH.CASE_REFID
INNER JOIN 
    FMS_PA_RESPONDENTS PAR ON PAR.PA_REFID = PAH.PA_REFID AND PAR.RS_TYPE = 'ACC'
INNER JOIN 
    FMS_RESPONDENTS_DETAILS RD ON RD.RS_REFID = PAR.RS_REFID
LEFT OUTER JOIN 
    FMSV_PA_COLLECTION_DETAILS FCD ON FCD.PA_REFID = PAH.PA_REFID
LEFT OUTER JOIN 
    FMSV_PA_NEXT_COLLECTION FNC ON FNC.PA_REFID = PAH.PA_REFID
WHERE 
    PAH.PAYMENT_TYPE = 'FI' AND PAH.STATUS != 'I';"

}
{

index:76,
ViewName : "FMSV_FINES_RECON_REPORT",

MigQuery:"SELECT DISTINCT PAH.PA_REFID,
  PAH.PAYMENT_TYPE,
  RD.RS_ID_NUMBER,
  RD.RS_NAME,
  ISNULL(CD.CASE_NO, CD.CHARGE_DETAILS) AS CASE_NO,
  CD.CASE_ID AS CASE_ID,
  CD.COURT_NUMBER,
  ISNULL(CD.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM,
  CASE
    WHEN ISNULL(PAH.TERMINATION_STATUS, 'N') = 'Y'
    THEN ((PAH.TOTAL_AMOUNT) - (ISNULL(FCD.PAID_AMOUNT, 0)))
    ELSE FNC.DUE_AMOUNT
  END AS DUE_AMOUNT,
  FNC.DUE_DATE,
  DATE_OF_ORDER,
  JO_ID,
  CO_ID,
  CASE
    WHEN ISNULL(PAH.STATUS, 'A') = 'I'
    THEN 'WITHDRAWN'
    WHEN ((PAH.TOTAL_AMOUNT) - (ISNULL(FCD.PAID_AMOUNT, 0))) = 0
    THEN FCD.RECIEPT_NUMBER
    WHEN ISNULL(PAH.TERMINATION_STATUS, 'N') = 'Y'
    THEN 'TERMINATED'
    WHEN CONVERT(VARCHAR, FNC.DUE_DATE, 112) >= CONVERT(VARCHAR, GETDATE(), 112)
    THEN 'PENDING'
    ELSE 'OVER DUE'
  END AS STATUS,
  FCD.RECIEPT_NUMBER AS RECEIPT_NUMBER,
  ISNULL(PAH.TERMINATION_STATUS, 'N') AS TERMINATION_STATUS,
  PAH.WARRANT_TYPE,
  PAH.WARRANT_NUMBER,
  PAH.TERMINATION_DATE,
  PAH.WARRANT_STATUS,
  CASE
    WHEN PAH.UNTERMINATION_DATE IS NULL
    THEN ' '
    ELSE 'Y'
  END AS UNTERMINATION_STATUS,
  PAH.UNTERMINATION_DATE,
  PAH.TOTAL_AMOUNT AS TOTAL_PAYABLE_AMOUNT,
  ISNULL(PAH.TOTAL_FINE_AMOUNT, PAH.TOTAL_AMOUNT) AS TOTAL_AMOUNT,
  ((PAH.TOTAL_AMOUNT) - (ISNULL(FCD.PAID_AMOUNT, 0))) AS OUTSTANDING_AMOUNT,
  PAH.CREATED_DATE AS TRANSACTION_DATE,
  CONVERT(VARCHAR, PAH.CREATED_DATE, 108) AS TRANSACTION_TIME_24HR, -- HH:MM:SS
  ISNULL(PAH.STATUS, 'A') AS RECORD_STATUS,
  PAH.REMARKS
FROM FMS_PA_HEADER PAH
INNER JOIN FMS_CASE_DETAILS CD ON CD.CASE_REFID = PAH.CASE_REFID
INNER JOIN FMS_PA_RESPONDENTS PAR ON PAR.PA_REFID = PAH.PA_REFID AND PAR.RS_TYPE = 'ACC'
INNER JOIN FMS_RESPONDENTS_DETAILS RD ON RD.RS_REFID = PAR.RS_REFID
LEFT OUTER JOIN FMSV_PA_COLLECTION_DETAILS FCD ON FCD.PA_REFID = PAH.PA_REFID
LEFT OUTER JOIN FMSV_PA_NEXT_COLLECTION FNC ON FNC.PA_REFID = PAH.PA_REFID
WHERE PAH.PAYMENT_TYPE IN ('FI');"

}

{

index:77,

ViewName : "FMSV_FINES_SEARCH",

MigQuery:"SELECT DISTINCT PAH.PA_REFID,
    RD.RS_ID_NUMBER,
    RD.RS_NAME,
    CD.CASE_ID,
    CD.COURT_NUMBER,
    CD.SOURCE_SYSTEM,
    PAH.TOTAL_AMOUNT,
    PAH.STATUS
FROM FMS_PA_HEADER PAH
INNER JOIN FMS_CASE_DETAILS CD ON CD.CASE_REFID = PAH.CASE_REFID
INNER JOIN FMS_PA_RESPONDENTS PAR ON PAR.PA_REFID = PAH.PA_REFID AND PAR.RS_TYPE = 'ACC'
INNER JOIN FMS_RESPONDENTS_DETAILS RD ON RD.RS_REFID = PAR.RS_REFID
WHERE PAH.PAYMENT_TYPE = 'FI';"

}

{

index:78,
ViewName : FMSV_FINES_TO_AXS,
MigQuery:"SELECT PAH.PAYMENT_TYPE, PAH.PA_REFID, PAD.INST_PA_REFID, PAD.DUE_AMOUNT, PAD.DUE_DATE, RD.RS_NAME, RD.RS_ID_NUMBER, RD.RS_ID_TYPE,
    CASE
        WHEN CD.CASE_NO IS NOT NULL THEN CD.CASE_NO
        ELSE CD.CASE_ID
    END AS CASE_ID,
    CD.COURT_NUMBER
FROM FMS_PA_HEADER PAH
INNER JOIN FMS_PA_DETAILS PAD ON PAD.PA_REFID = PAH.PA_REFID
INNER JOIN FMS_CASE_DETAILS CD ON CD.CASE_REFID = PAH.CASE_REFID
INNER JOIN FMS_PA_RESPONDENTS PAR ON PAR.PA_REFID = PAH.PA_REFID AND PAR.RS_TYPE = 'ACC'
INNER JOIN FMS_RESPONDENTS_DETAILS RD ON RD.RS_REFID = PAR.RS_REFID
WHERE PAH.PAYMENT_TYPE = 'FI' AND PAH.STATUS != 'I' AND (PAD.DUE_DATE - GETDATE()) >= 0 AND PAD.DUE_AMOUNT != 0 AND CD.COURT_NUMBER NOT LIKE 'FC%'
AND PAD.INST_PA_REFID NOT IN (SELECT INST_PA_REFID FROM FMS_PA_COLLECTION_MAP CMP WHERE CMP.INST_PA_REFID = PAD.INST_PA_REFID);"

}

{

index:79,
ViewName : "FMSV_FMS2CJTS_RECON_REPORT",

MigQuery:"SELECT
  FCD.PA_REFID, FCD.PAYMENT_TYPE, FCD.RECIEPT_NUMBER, FCD.TRANSACTION_AMOUNT, FCD.TRANSACTION_DATETIME,
  STG.RECON_REFID, STG.PAYMENT_REFERENCE AS CJTS_REFERENCE_NO, STG.PAYMENT_TYPE AS CJTS_PAYMENT_TYPE, STG.RECEIPT_NUMBER AS CJTS_RECEIPT_NUMBER,
  STG.TRANSACTION_AMOUNT AS CJTS_TRANSACTION_AMOUNT, STG.TRANSACTION_DATETIME AS CJTS_TRANSACTION_DATETIME
FROM FMSV_RECON_RECEIPT_DETAILS_2 FCD
LEFT OUTER JOIN FMS_CJTS_RECON_INPUTS_STG STG ON STG.RECEIPT_NUMBER = FCD.RECIEPT_NUMBER AND STG.STATUS = 'A'
WHERE SOURCE_SYSTEM = 'CJTS'
ORDER BY STG.RECEIPT_NUMBER ASC;"

}

{

index:80,

ViewName : "FMSV_INITIAL_PAYMENT_DETAILS",
MigQuery: "SELECT A.INST_PA_REFID, A.PA_REFID, A.DUE_AMOUNT, A.DUE_DATE
FROM FMS_PA_DETAILS A
INNER JOIN (
    SELECT PA_REFID, MIN(DUE_DATE) AS INI_PAY_DATE
    FROM FMS_PA_DETAILS
    GROUP BY PA_REFID
) B ON A.PA_REFID = B.PA_REFID AND A.DUE_DATE = B.INI_PAY_DATE;"

}

{

index:81,

ViewName : "FMSV_INST_AMENDMENTS_DETAILS",

MigQuery:"SELECT A.PA_REFID, A.TOTAL_AMOUNT, B.NO_OF_INSTALLMENTS, B.CURRENT_VERSION_NO
FROM FMSV_FINES_PA_ENQUIRY A
INNER JOIN FMSV_INSTALLMENTS_GRANTED B ON A.PA_REFID = B.PA_REFID
WHERE B.NO_OF_INSTALLMENTS > 1 AND B.CURRENT_VERSION_NO > 1"

}

{

index:82,

ViewName : "FMSV_INSTALLMENTS_DETAILS",

MigQuery:"SELECT A.PA_REFID, A.RS_ID_NUMBER, A.RS_NAME, A.CASE_ID, A.COURT_NUMBER, A.DUE_DATE, A.DUE_AMOUNT, A.DATE_OF_ORDER, A.CO_ID, A.JO_ID, A.TOTAL_AMOUNT,
A.OUTSTANDING_AMOUNT, A.STATUS, B.NO_OF_INSTALLMENTS
FROM FMSV_FINES_PA_ENQUIRY A
INNER JOIN FMSV_INSTALLMENTS_GRANTED B ON A.PA_REFID = B.PA_REFID
WHERE A.STATUS NOT LIKE '%RCPT%' AND B.NO_OF_INSTALLMENTS > 1"

}

{

index:83,
ViewName : "FMSV_INSTALLMENTS_GRANTED",
MigQuery:"SELECT PA_REFID,
       COUNT(*) AS NO_OF_INSTALLMENTS,
       MAX(ISNULL(VERSION_NUMBER, '1')) AS CURRENT_VERSION_NO
FROM FMS_PA_DETAILS
WHERE ISNULL(IS_ACTIVE, 'Y') = 'Y'
GROUP BY PA_REFID;"

}

{

index:84,

ViewName : "FMSV_IS_CURRENT_TASK",

MigQuery:"SELECT A.FMS_REFERENCE,
       B.PROCESS_ID,
       'FD' AS PROCESS_TYPE,
       LOWER(A.USER_ID) AS ASSIGNED_USER,
       C.WF_GROUP_ID AS USER_GROUP
FROM FMS_WORKFLOW_ACTIVITIES A
INNER JOIN FMS_WORKFLOW_PROCESS_DETAILS B ON B.REF_ID = A.FMS_REFERENCE AND END_DATE IS NULL
INNER JOIN FMS_ACL_MASTER C ON A.ROLE_ID = CAST(C.ACL_REFID AS VARCHAR)
UNION
SELECT A.PA_REFID AS FMS_REFERENCE,
       A.TERMINATION_ID AS PROCESS_ID,
       'DPF' AS PROCESS_TYPE,
       LOWER(A.CREATED_BY) AS ASSIGNED_USER,
       C.GROUP_ID AS USER_GROUP
FROM FMS_PA_HEADER A
LEFT JOIN FMS_CASE_DETAILS B ON A.CASE_REFID = B.CASE_REFID
LEFT JOIN FMS_WORKFLOW_BPMS_USERGROUPS C ON B.COURT_NUMBER = C.COURT_NO AND ROLE_ID = 'JO'
WHERE TERMINATION_STATUS = 'Y' AND TERMINATION_ID != 'CLS'
UNION
SELECT PA_REFID AS FMS_REFERENCE,
       TERMINATION_ID AS PROCESS_ID,
       'DPO' AS PROCESS_TYPE,
       LOWER(CREATED_BY),
       '' AS USER_GROUP
FROM FMS_PA_HEADER
WHERE ISNULL(TERMINATION_ID, 'CLS') != 'CLS'
UNION
SELECT FC_REFID AS FMS_REFERENCE,
       PROCESS_ID,
       'FC' AS PROCESS_TYPE,
       LOWER(JO_ID),
       '' AS USER_GROUP
FROM FMS_FINES_CLINIC_DETAILS
WHERE ISNULL(PROCESS_ID, 'CLS') != 'CLS';"


}

{

index:85,

ViewName : "FMSV_IS_DASHBOARD",

MigQuery:"WITH BillingDetailsCTE AS (
    -- Initial selection, potentially identifying the starting point for the recursion
    SELECT
        PA_REFID,
        CAST(BILLING_DETAILS AS VARCHAR(MAX)) AS BILLING_DETAILS,
        1 AS Level,
        ROW_NUMBER() OVER (PARTITION BY PA_REFID ORDER BY (SELECT NULL)) AS RowNum
    FROM FMS_PA_BILLING_DETAILS
    WHERE 1 = 1 -- Adjust this condition as necessary

    UNION ALL

    -- Recursive step, appending billing details
    SELECT
        b.PA_REFID,
        CAST(a.BILLING_DETAILS + ',, ' + b.BILLING_DETAILS AS VARCHAR(MAX)),
        a.Level + 1 AS Level,
        b.RowNum
    FROM BillingDetailsCTE a
    INNER JOIN (
        SELECT
            PA_REFID,
            BILLING_DETAILS,
            ROW_NUMBER() OVER (PARTITION BY PA_REFID ORDER BY (SELECT NULL)) AS RowNum
        FROM FMS_PA_BILLING_DETAILS
    ) b ON a.PA_REFID = b.PA_REFID AND a.RowNum + 1 = b.RowNum
)
, MaxLevelCTE AS (
    SELECT
        PA_REFID,
        MAX(Level) AS MaxLevel
    FROM BillingDetailsCTE
    GROUP BY PA_REFID
)
SELECT
    A.PA_REFID AS PA_REFID,
    PAYMENT_TYPE,
    BILLING_TYPE,
    D.RS_ID_NUMBER,
    D.RS_NAME AS RS_NAME,
    A.CREATED_DATE,
    A.CREATED_BY,
    B.DUE_AMOUNT AS DUE_AMOUNT,
    B.DUE_DATE AS DUE_DATE,
    ISNULL(RECIEPT_NUMBER, 'PENDING') AS STATUS,
    COLLECTION_DATE,
    cte.BILLING_DETAILS AS CASE_NUMBER
FROM FMS_PA_HEADER A
INNER JOIN FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS C ON C.PA_REFID = B.PA_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS D ON C.RS_REFID = D.RS_REFID
LEFT JOIN FMSV_COLLECTION_HEADER E ON E.INST_PA_REFID = B.INST_PA_REFID AND ISNULL(E.IS_VOID, 'N') != 'Y'
INNER JOIN BillingDetailsCTE cte ON A.PA_REFID = cte.PA_REFID
INNER JOIN MaxLevelCTE mlcte ON cte.PA_REFID = mlcte.PA_REFID AND cte.Level = mlcte.MaxLevel
WHERE A.PAYMENT_TYPE IN ('IS') AND A.STATUS NOT IN ('I');
"

}

{

index:86,

ViewName : "FMSV_IS_PA_CAN_WITHDRAW",

MigQuery:"SELECT PA_REFID, CREATED_BY
FROM FMS_PA_HEADER
WHERE ISNULL(TERMINATION_STATUS, 'N') != 'Y'
AND PA_REFID NOT IN (
    SELECT PA_REFID
    FROM FMS_COLLECTION_HEADER
    WHERE ISNULL(IS_VOID, 'N') != 'Y'
);"

}

{

index:87,

ViewName : "FMSV_IS_WF_COMPLETED",

MigQuery:"SELECT FMS_REFERENCE
FROM FMS_WORKFLOW_ACTIVITIES
WHERE END_DATE IS NOT NULL
AND ACTION_CODE IN ('APP');"

}

{

index:88,

ViewName : "FMSV_JAV_DASHBOARD",

MigQuery:"SELECT A.JAV_REFID, A.JOURNAL_ID, A.JOURNAL_DATE, A.LEDGER, A.DEBIT_DEPARTMENT, A.CREDIT_DEPARTMENT,
       A.TOTAL_CREDIT_AMOUNT, A.STATUS, A.CREATED_BY, C.USER_ID AS PROCESS_OFFICER,
       CASE
           WHEN A.STATUS = 'APP' THEN A.STATUS
           ELSE ISNULL(D.ACTION_CODE, 'PSUB')
       END AS WF_STATUS,
       SUBMISSION_OFFICER, SUBMISSION_DATE
FROM FMS_JAV_HEADER A
LEFT JOIN FMSV_FD_LAST_ACTIVITY D ON D.FMS_REFERENCE = A.JAV_REFID
LEFT JOIN FMS_WORKFLOW_ACTIVITIES C ON C.FMS_REFERENCE = A.JAV_REFID AND C.END_DATE IS NULL
LEFT JOIN FMSV_WF_SUBMISSION_DETAILS E ON E.FMS_REFERENCE = A.JAV_REFID
WHERE 1 = 1;"

}

{

index:89,

ViewName : "FMSV_JAV_REPORT",

MigQuery:"SELECT FJLD.JAV_REFID, FJLD.LINE_DESCRIPTION, FJLD.CREDIT_AMOUNT, FJLD.ACCOUNT_NO, FJLD.COST_CENTER,
       FJLD.SUBACCOUNT_NO, FJH.REMARKS, FJH.JOURNAL_DATE, FJH.STATUS, FJH.JOURNAL_ID
FROM FMS_JAV_LINE_DETAILS FJLD
RIGHT JOIN FMS_JAV_HEADER FJH ON FJLD.JAV_REFID = FJH.JAV_REFID
WHERE STATUS = 'APP';"

}

{

index:90,
ViewName : "FMSV_MI_DASHBOARD",

MigQuery:"SELECT 
    A.PA_REFID AS PA_REFID,
    A.BILLING_TYPE AS USAGE_TYPE, 
    F.BILLING_TYPE AS CHARGE_TYPE, 
    F.BILLING_CATEGORY AS DOC_CATEGORY,
    D.RS_ID_NUMBER AS RS_ID_NUMBER,
    D.RS_NAME AS RS_NAME,
    D.RS_EMP_NAME AS ORGANIZATION_NAME,
    D.RS_VEHICLE_NUMBER AS RS_VEHICLE_NUMBER,
    RS_IU_NUMBER, 
    A.CREATED_DATE, 
    (UNIT_PRICE * QUANTITY) + FIXED_CHARGE AS DUE_AMOUNT,
    B.DUE_DATE AS DUE_DATE,  
    ISNULL(F.RECEIPT_NO, 'PENDING') AS STATUS,
    F.PAYMENT_DATE AS COLLECTION_DATE,  
    PAYMENT_TYPE, 
    F.BILLING_DETAILS AS BILLING_DETAILS,
    F.LINE_ID
FROM FMS_PA_HEADER A
INNER JOIN FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS C ON C.PA_REFID = B.PA_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS D ON C.RS_REFID = D.RS_REFID
INNER JOIN FMS_PA_BILLING_DETAILS F ON A.PA_REFID = F.PA_REFID
WHERE A.PAYMENT_TYPE NOT IN ('FI', 'CB', 'HR', 'CD', 'CP', 'RU', 'IS') AND A.STATUS != 'I'"

}

{

index:91,
ViewName : "FMSV_MONTHLY_RENTAL_CHARGES",

MigQuery:"SELECT FPH.PA_REFID, FPH.START_DATE, FPH.END_DATE, (FPD.DUE_AMOUNT-FPD.GST_AMOUNT) AS DUE_AMOUNT, FPD.GST_AMOUNT,       
FRD.RS_NAME, FRD.RS_EMP_NAME, FRD.RS_EMP_FAX_CC, FRD.RS_EMP_FAX_NUMBER, FRD.RS_ID_NUMBER, FRD.RS_PHONE_CC, FRD.RS_PHONE_NUMBER, FRD.RS_MOBILE_CC, FRD.RS_MOBILE_NUMBER, 
FCH.RECIEPT_NUMBER, FCD.BANK_CODE, FCD.BANK_REFERENCE, '' AS BANK_IN_DATE, FPD.BILLING_MONTH, FPD.BILLING_YEAR FROM FMS_RESPONDENTS_DETAILS FRD 
INNER JOIN FMS_PA_RESPONDENTS FPR ON FRD.RS_REFID = FPR.RS_REFID 
INNER JOIN FMS_PA_DETAILS FPD ON FPD.PA_REFID=FPR.PA_REFID 
INNER JOIN FMS_PA_HEADER FPH ON FPH.PA_REFID=FPD.PA_REFID
LEFT OUTER JOIN FMS_COLLECTION_HEADER FCH
ON FCH.INST_PA_REFID = FPD.INST_PA_REFID
LEFT OUTER JOIN FMS_COLLECTION_DETAILS FCD
ON FCH.COL_REFID = FCD.COL_REFID
WHERE FPH.PAYMENT_TYPE = 'RU'"

}

{

index:92,

ViewName : "FMSV_NCA_DASHBOARD",

MigQuery:"SELECT 
    A.NC_REFID,
    A.ALLOWANCE_TYPE,
    A.DEPARTMENT,
    A.LOCATION,
    A.ACCRUAL_MONTH,
    A.ACCRUAL_YEAR,
    A.REMARKS,
    A.STATUS,
    A.ALLOWANCE_FORM_TYPE,
    A.STAFF_TYPE,
    A.CREATED_BY,
    A.CREATED_DATE,
    B.USER_ID AS PROCESS_OFFICER,
    ISNULL(D.ACTION_CODE, 'PSUB') AS WF_STATUS, 
    SUBMISSION_OFFICER, 
    SUBMISSION_DATE
FROM FMS_NCA_HEADER A
LEFT JOIN FMSV_FD_LAST_ACTIVITY D ON D.FMS_REFERENCE = A.NC_REFID
LEFT JOIN FMS_WORKFLOW_ACTIVITIES B ON B.FMS_REFERENCE = A.NC_REFID AND B.END_DATE IS NULL
LEFT JOIN FMSV_WF_SUBMISSION_DETAILS E ON E.FMS_REFERENCE = A.NC_REFID
WHERE A.STATUS NOT IN ('RSUB', 'CLS', 'I')"
}

{

index:93,
ViewName : "FMSV_NFS_PAYMENTS_DASHBOARD",

MigQuery:"SELECT 
  A.PAYMENT_REFERENCE, A.PAYMENT_TYPE, A.VENDOR_ID, A.VENDOR_NAME, A.INVOICE_NUMBER, A.INVOICE_DATE, 
  A.DATE_RECEIVED, A.STATUS,
  CASE
    WHEN ISNULL(F.RF_AMOUNT,0) != 0 THEN F.RF_AMOUNT
    ELSE B.AMOUNT
  END AS AMOUNT,
  B.COST_CENTER, B.ACCOUNT_NUMBER, B.SUBACCOUNT_NUMBER, A.CERTIFYING_OFFICER, C.USER_ID AS PROCESS_OFFICER,
  A.CREATED_BY, A.CREATED_DATE, A.NFS_VOUCHER_NUMBER, A.NFS_PAID_DATE, A.VITAL_SUBMISSION_DATE,
  CASE
    WHEN A.STATUS IN ('APP','CLS','RSUB','DEL') THEN A.STATUS
    ELSE ISNULL(D.ACTION_CODE,'PSUB')
  END AS WF_STATUS,
  E.SUBMISSION_OFFICER, E.SUBMISSION_DATE
FROM FMS_PV_HEADER A
INNER JOIN FMSV_PV_LINE_DETAILS B ON A.PAYMENT_REFERENCE = B.PAYMENT_REFERENCE
LEFT OUTER JOIN FMSV_FD_LAST_ACTIVITY D ON D.FMS_REFERENCE = A.PAYMENT_REFERENCE
LEFT OUTER JOIN FMS_WORKFLOW_ACTIVITIES C ON C.FMS_REFERENCE = A.PAYMENT_REFERENCE AND C.END_DATE IS NULL
LEFT OUTER JOIN FMSV_WF_SUBMISSION_DETAILS E ON E.FMS_REFERENCE = A.PAYMENT_REFERENCE
LEFT OUTER JOIN FMSV_PV_LINE_DETAILS_CBRF F ON F.PA_REFID = A.PAYMENT_REFERENCE
WHERE A.STATUS NOT IN ('DEL','I')
"

}

{

index:94,

ViewName : "FMSV_NON_E_INVOICE_REPORT",

MigQuery:"SELECT 
  PVH.PAYMENT_REFERENCE,
  PVH.PAYMENT_TYPE, 
  PVH.VENDOR_ID, 
  PVH.VENDOR_NAME, 
  PVH.INVOICE_NUMBER, 
  PVH.INVOICE_DATE, 
  PVH.PAYMENT_TERMS,
  PVH.REMARKS,
  PVH.CERTIFYING_OFFICER, 
  PVH.DATE_RECEIVED AS DATE_RECIEVED, -- Assuming typo correction
  PVH.OIC_NAME, 
  PVH.OIC_DEPARTMENT, 
  PVH.STATUS,
  PVH.VITAL_SUBMISSION_DATE,
  PVH.VITAL_PROCESSING_DATE,
  PVH.NFS_VOUCHER_NUMBER,
  PVH.NFS_PAID_DATE,
  PVL.PAYMENT_TYPE AS PAYMENT_DESC, 
  PVL.AMOUNT, 
  PVL.ACCOUNT_NUMBER, 
  PVL.COST_CENTER, 
  PVL.SUBACCOUNT_NUMBER
FROM FMS_PV_HEADER PVH  
INNER JOIN FMS_PV_LINE_DETAILS PVL ON PVH.PAYMENT_REFERENCE = PVL.PAYMENT_REFERENCE 
WHERE PVL.AMOUNT > 0 AND PVH.STATUS IN ('APP', 'CLS')"

}

{

index:95,

ViewName : "FMSV_NOTIFICATION_DETAILS",

MigQuery:"SELECT 
    REFERENCE_ID, 
    SUB_REFERENCE_ID, 
    PAYMENT_TYPE, 
    CASE_ID, 
    COURT_NUMBER, 
    JO_ID, 
    CO_ID, 
    DUE_DATE, 
    DUE_AMOUNT, 
    TOTAL_AMOUNT,
    OUTSTANDING_AMOUNT, 
    RESPONDENT_NAME, 
    RESPONDENT_ID, 
    RESPONDENT_EMAIL, 
    ASSIGNED_TO_USER, 
    ASSIGNED_TO_GROUP, 
    PROCESS_ID, 
    VERSION_NO, 
    STATUS,
    REMARKS, 
    SUBMITTED_BY, 
    SUBMITTED_ON, 
    UPDATED_BY, 
    UPDATED_ON, 
    DATEDIFF(DAY, DUE_DATE, GETDATE()) AS OUTSTANDING_DAYS,
    DATEDIFF(DAY, CAST(SUBMITTED_ON AS DATE), CAST(GETDATE() AS DATE)) AS PENDING_DAYS, 
    ISNULL(ESCALATION_DAYS,0) AS ESCALATION_DAYS  
FROM FMS_NOTIFICATION_PROCESS
"

}

{

index:96,
ViewName : "FMSV_NOTIFY_MI_PAYMENTS_B4DUE",

MigQuery:"SELECT 
    A.PA_REFID AS PA_REFID, 
    BILLING_TYPE,
    D.RS_NAME, 
    D.RS_IU_NUMBER, 
    D.RS_EMAIL,
    B.DUE_AMOUNT,  
    B.DUE_DATE,
    ISNULL(RECIEPT_NUMBER,'PENDING') AS STATUS,
    COLLECTION_DATE, 
    PAYMENT_TYPE,
    A.STATUS AS RECORD_STATUS,
    A.CREATED_DATE,
    A.CREATED_BY AS OIC_NAME,
    (B.DUE_AMOUNT - ISNULL(B.GST_AMOUNT,0)) - ISNULL(E.PAID_AMOUNT,0) AS BALANCE_AMOUNT,
    ISNULL(B.SOURCE_SYSTEM, 'FMS') AS SOURCE_SYSTEM
FROM FMS_PA_HEADER A
INNER JOIN FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
INNER JOIN FMS_PA_RESPONDENTS C ON C.PA_REFID = B.PA_REFID
INNER JOIN FMS_RESPONDENTS_DETAILS D ON C.RS_REFID = D.RS_REFID
LEFT OUTER JOIN FMSV_COLLECTION_DETAILS E ON E.INST_PA_REFID = B.INST_PA_REFID
WHERE A.PAYMENT_TYPE IN ('CC','MI','MS','RD','CT')
  AND A.STATUS NOT IN ('I') 
  AND (B.DUE_AMOUNT - ISNULL(B.GST_AMOUNT,0)) - ISNULL(E.PAID_AMOUNT,0) > 0"

}

{

index:97,
ViewName : "FMSV_OVERDUE_INSTALLMENTS",

MigQuery:"SELECT 
    PA_REFID,
    RS_ID_NUMBER,
    RS_NAME,
    CASE_ID,
    COURT_NUMBER,
    DUE_DATE,
    DUE_AMOUNT,
    DATE_OF_ORDER,
    CO_ID,
    JO_ID,
    TOTAL_AMOUNT,
    OUTSTANDING_AMOUNT,
    STATUS,
    WARRANT_TYPE,
    WARRANT_NUMBER,
    TERMINATION_DATE
FROM FMSV_FINES_PA_ENQUIRY
WHERE TERMINATION_STATUS = 'Y' 
  AND UNTERMINATION_STATUS != 'Y'
  AND WARRANT_TYPE IS NOT NULL 
  AND ISNULL(WARRANT_STATUS,'C') != 'C' 
  AND DUE_AMOUNT > 0.0
ORDER BY PA_REFID DESC"

}

{

index:98,

ViewName : "FMSV_PA_BALANCE_AMOUNT",

MigQuery:"SELECT 
    A.INST_PA_REFID,
    MAX(A.DUE_AMOUNT) - SUM(B.PAYMENT_AMOUNT) AS BALANCE_AMOUNT 
FROM 
    (SELECT 
        FCH.COL_REFID AS COL_REFID,
        FCH.PARENT_INST AS INST_PA_REFID, 
        SUM(FCH.DUE_AMOUNT) + 
        CASE 
            WHEN MAX(FCH.GST_INCLUSIVE) = 'Y' THEN 0
            ELSE MAX(FCH.GST_AMOUNT)
        END + MAX(FCH.INTEREST_AMOUNT) AS DUE_AMOUNT 
     FROM 
        FMSV_COLLECTION_HEADER FCH 
     WHERE 
        ISNULL(FCH.IS_VOID, 'N') != 'Y' 
     GROUP BY 
        FCH.COL_REFID, FCH.PARENT_INST) A 
INNER JOIN 
    FMS_COLLECTION_DETAILS B ON A.COL_REFID = B.COL_REFID
GROUP BY 
    A.INST_PA_REFID"

}

{

index:99,

ViewName : "FMSV_PA_COLLECTION_DETAILS",

MigQuery:"SELECT 
    FPD.PA_REFID AS PA_REFID,
    (MAX(ISNULL(FPD.DUE_AMOUNT, 0)) - SUM(ISNULL(FCD.PAYMENT_AMOUNT, 0))) AS DUE_AMOUNT,
    SUM(ISNULL(FCD.PAYMENT_AMOUNT, 0)) AS PAID_AMOUNT,
    MAX(DUE_DATE) AS DUE_DATE,
    MAX(RECIEPT_NUMBER) AS RECIEPT_NUMBER
FROM 
    FMS_PA_DETAILS FPD
INNER JOIN 
    FMS_COLLECTION_HEADER FCH ON FCH.INST_PA_REFID = FPD.INST_PA_REFID AND ISNULL(FCH.IS_VOID, 'N') NOT IN ('Y', 'R', 'T')
INNER JOIN 
    FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCD.COL_REFID
WHERE 
    ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y' 
GROUP BY 
    FPD.PA_REFID"


}

{

index:100,

ViewName : "FMSV_PA_DETAILS_DUE",

MigQuery:"SELECT 
    UFPD.INST_PA_REFID,
    UFPD.PA_REFID,
    UFPD.DUE_AMOUNT,
    UFPD.DUE_DATE,
    UFPD.CREATED_DATE 
FROM 
    FMS_PA_DETAILS AS UFPD
    INNER JOIN (
        SELECT 
            FPD.PA_REFID,
            MIN(FPD.DUE_DATE) AS DUE_DATE 
        FROM 
            FMS_PA_DETAILS AS FPD
            LEFT OUTER JOIN FMSV_COLLECTION_DETAILS AS FVCH ON FVCH.INST_PA_REFID = FPD.INST_PA_REFID
        WHERE 
            ISNULL(FVCH.PAID_AMOUNT, 0) < FPD.DUE_AMOUNT 
            AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
        GROUP BY 
            FPD.PA_REFID
    ) AS NCLBD ON UFPD.PA_REFID = NCLBD.PA_REFID AND UFPD.DUE_DATE = NCLBD.DUE_DATE
WHERE 
    ISNULL(UFPD.IS_ACTIVE, 'Y') = 'Y'

UNION

SELECT 
    UFPD.INST_PA_REFID,
    UFPD.PA_REFID,
    UFPD.DUE_AMOUNT,
    UFPD.DUE_DATE,
    UFPD.CREATED_DATE 
FROM 
    FMS_PA_DETAILS AS UFPD
    INNER JOIN FMSV_COLLECTION_DETAILS AS FVCH ON FVCH.INST_PA_REFID = UFPD.INST_PA_REFID
WHERE 
    ISNULL(FVCH.PAID_AMOUNT, 0) >= UFPD.DUE_AMOUNT;"

}

{

index:101,

ViewName : "FMSV_PA_DETAILS2PROCESS_PAYNOW",

MigQuery:"SELECT 
    FPH.PA_REFID, 
    FPH.TOTAL_AMOUNT, 
    FPD.INST_PA_REFID, 
    FPH.PAYMENT_TYPE,
    FPD.DUE_AMOUNT, 
    CONVERT(VARCHAR, FPD.DUE_DATE, 103) AS DUE_DATE, -- DD/MM/YYYY format
    FPD.GST_APPLICABLE, 
    FPD.GST_PERCENT, 
    FPD.GST_AMOUNT,
    FRD.RS_REFID AS PAYER_REFID, 
    FRD.RS_NAME, 
    UPPER(FRD.RS_ID_NUMBER) AS RS_ID_NUMBER, 
    FRD.RS_ID_TYPE, 
    FRD.RS_EMP_NAME AS ORGANIZATION_NAME,
    FRD.RS_EMAIL, 
    FRD.RS_PHONE_CC, 
    FRD.RS_PHONE_NUMBER, 
    FRD.RS_MOBILE_CC, 
    FRD.RS_MOBILE_NUMBER,
    FAD.ADDRESS_TYPE, 
    FAD.BLOCK_NO, 
    FAD.STREET_NAME, 
    FAD.FLOOR_NO, 
    FAD.UNIT_NO, 
    FAD.BUILDING_NAME, 
    FAD.CITY_NAME, 
    FAD.STATE_NAME, 
    FAD.COUNTRY_NAME, 
    FAD.POSTAL_CODE,
    CASE 
        WHEN FCD.CASE_NO IS NOT NULL THEN FCD.CASE_NO
        ELSE FCD.CASE_ID 
    END AS CASE_ID,
    FCD.COURT_NUMBER, 
    FCD.CHARGE_DETAILS, 
    ISNULL(FCD.SOURCE_SYSTEM, ISNULL(FPD.SOURCE_SYSTEM, 'FMS')) AS SOURCE_SYSTEM
FROM 
    FMS_PA_HEADER AS FPH 
    INNER JOIN FMS_PA_DETAILS AS FPD ON FPH.PA_REFID = FPD.PA_REFID AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
    INNER JOIN FMS_PA_RESPONDENTS AS FPR ON FPR.PA_REFID = FPH.PA_REFID AND ISNULL(FPR.IS_DEFAULT_PAYER, 'N') = 'Y'
    INNER JOIN FMS_RESPONDENTS_DETAILS AS FRD ON FPR.RS_REFID = FRD.RS_REFID
    INNER JOIN FMS_ADDRESS_DETAILS AS FAD ON FAD.RS_REFID = FRD.RS_REFID AND FAD.ADDRESS_TYPE IN ('SELF', 'BLR')
    LEFT OUTER JOIN FMS_CASE_DETAILS AS FCD ON FCD.CASE_REFID = FPH.CASE_REFID
WHERE 
    ISNULL(FPH.STATUS, 'A') NOT IN ('I', 'D') 
    AND ISNULL(FPH.BILLING_TYPE, 'A') != 'M'
ORDER BY 
    FPH.PA_REFID, FPD.INST_PA_REFID ASC;"

}

{

index:102,

ViewName : "FMSV_PA_INFO",

MigQuery:"SELECT DISTINCT FPH.PA_REFID, FPH.PAYMENT_TYPE, FPH.COST_CENTER, FPH.ACCOUNT_NUMBER,
ISNULL(FPH.STATUS, 'A') AS STATUS, FPH.CREATED_BY, FPH.CREATED_DATE,
FPH.UPDATED_BY, FPH.UPDATED_DATE, FPH.VERSION_NUMBER, FCD.COURT_NUMBER,
ISNULL(FCD.CASE_NO, ISNULL(FCD.CASE_ID, '')) AS CASE_ID,
ISNULL(FCD.SOURCE_SYSTEM, ISNULL(FPD.SOURCE_SYSTEM, 'FMS')) AS SOURCE_SYSTEM
FROM FMS_PA_HEADER FPH
INNER JOIN FMS_PA_DETAILS FPD ON FPH.PA_REFID = FPD.PA_REFID AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
LEFT OUTER JOIN FMS_CASE_DETAILS FCD ON FPH.CASE_REFID = FCD.CASE_REFID"
}

{

index:103,

ViewName : "FMSV_PA_NEXT_COLLECTION",

MigQuery:"SELECT UFPD.INST_PA_REFID, UFPD.PA_REFID, UFPD.DUE_AMOUNT, UFPD.DUE_DATE, UFPD.CREATED_DATE
FROM FMS_PA_DETAILS UFPD
JOIN (
    SELECT FPD.PA_REFID, MIN(FPD.DUE_DATE) AS DUE_DATE
    FROM FMS_PA_DETAILS FPD
    LEFT JOIN FMS_PA_COLLECTION_MAP FPCD ON FPD.INST_PA_REFID = FPCD.INST_PA_REFID
    WHERE FPCD.INST_PA_REFID IS NULL AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
    GROUP BY FPD.PA_REFID
) NCLBD ON UFPD.PA_REFID = NCLBD.PA_REFID AND UFPD.DUE_DATE = NCLBD.DUE_DATE
WHERE ISNULL(UFPD.IS_ACTIVE, 'Y') = 'Y'"

}

{

index:104,

ViewName : "FMSV_PAID_PA",

MigQuery:"SELECT DISTINCT INST_PA_REFID AS PA_REFID
FROM (
    SELECT INST_PA_REFID, BALANCE_AMOUNT
    FROM FMSV_PA_BALANCE_AMOUNT
    WHERE BALANCE_AMOUNT = 0
    UNION ALL
    SELECT A.INST_PA_REFID, B.BALANCE_AMOUNT
    FROM FMSV_COLLECTION_HEADER A
    JOIN FMSV_PA_BALANCE_AMOUNT B ON A.PARENT_INST = B.INST_PA_REFID
    WHERE ISNULL(A.IS_VOID, 'N') != 'Y'
) AS SubQuery"

}

{

index:105,

ViewName : "FMSV_PAYER_INFO_SCRIIMS",

MigQuery:"SELECT
    FCD.CASE_ID AS CASE_ID,
    FCH.PA_REFID AS FMS_TXN_ID,
    FCH.RECIEPT_NUMBER AS FMS_RECEIPT_NO,
    RS_ID_NUMBER AS PAYER_ID,
    RS_ID_TYPE AS PAYER_ID_TYPE,
    CASE WHEN 'A' = 'B' THEN RS_ID_NUMBER ELSE NULL END AS PAYEE_ID,
    CASE WHEN 'A' = 'B' THEN RS_ID_TYPE ELSE NULL END AS PAYEE_ID_TYPE,
    RS_NAME AS NAME,
    (RS_MOBILE_CC + RS_MOBILE_NUMBER) AS MOBILE_NO,
    CASE WHEN RS_PHONE_CC IS NULL OR RS_PHONE_CC = '65' THEN RS_PHONE_NUMBER ELSE '' END AS LOCAL_TEL_NO_HOME,
    RS_EMP_PHONE_NUMBER AS LOCAL_TEL_NO_OFFICE,
    CASE WHEN RS_PHONE_CC IS NOT NULL AND RS_PHONE_CC != '65' THEN (RS_PHONE_CC + RS_PHONE_NUMBER) ELSE '' END AS FOREIGN_TEL_NO_HOME,
    (RS_EMP_PHONE_CC + RS_EMP_PHONE_NUMBER) AS FOREIGN_TEL_NO_OFFICE,
    RS_EMAIL AS EMAIL,
    BLOCK_NO, BUILDING_NAME, STREET_NAME, FLOOR_NO, UNIT_NO, CITY_NAME AS CITY_STATE, POSTAL_CODE AS POSTAL_CD, COUNTRY_NAME AS COUNTRY
FROM FMS_COLLECTION_HEADER FCH
INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FCH.PAYER_RS_REFID = FRD.RS_REFID
INNER JOIN FMS_ADDRESS_DETAILS FAD ON FRD.RS_REFID = FAD.RS_REFID
INNER JOIN FMS_PA_HEADER FPH ON FCH.PA_REFID = FPH.PA_REFID
INNER JOIN FMS_CASE_DETAILS FCD ON FPH.CASE_REFID = FCD.CASE_REFID"

}

{

index:106,

ViewName : "FMSV_PAYMENT_STATUS",

MigQuery:"SELECT 
    FCD.CASE_ID AS CASE_ID,
    FPH.PAYMENT_TYPE AS FMS_TXN_TYPE,
    FCH.PA_REFID AS FMS_TXN_ID,
    FCH.RECIEPT_NUMBER AS RECEIPT_NO,
    FCH.COLLECTION_DATE AS PAYMENT_DT,
    FCH.IS_VOID,
    FCH.CREATED_DATE AS CREATEDON,
    FCH.CREATED_BY AS CREATEDBY,
    FCH.UPDATED_DATE AS UPDATEDON,
    FCH.UPDATED_BY AS UPDATEDBY
FROM 
    FMS_COLLECTION_HEADER FCH
    INNER JOIN FMS_PA_HEADER FPH ON FCH.PA_REFID = FPH.PA_REFID
    INNER JOIN FMS_CASE_DETAILS FCD ON FPH.CASE_REFID = FCD.CASE_REFID"
}

{

index:107,

ViewName : "SELECT 
    FCD.CASE_ID AS CASE_ID,
    FPH.PAYMENT_TYPE AS FMS_TXN_TYPE,
    FCH.PA_REFID AS FMS_TXN_ID,
    FCH.RECIEPT_NUMBER AS RECEIPT_NO,
    FCH.COLLECTION_DATE AS PAYMENT_DT,
    FCH.IS_VOID,
    FBD.BOND_ID,
    FCH.CREATED_DATE AS CREATEDON,
    FCH.CREATED_BY AS CREATEDBY,
    FCH.UPDATED_DATE AS UPDATEDON,
    FCH.UPDATED_BY AS UPDATEDBY
FROM 
    FMS_COLLECTION_HEADER FCH
    LEFT JOIN FMS_PA_HEADER FPH ON FCH.PA_REFID = FPH.PA_REFID
    LEFT JOIN FMS_CASE_DETAILS FCD ON FPH.CASE_REFID = FCD.CASE_REFID
    LEFT JOIN FMS_BAILBOND_DETAILS FBD ON FCH.PA_REFID = FBD.PA_REFID"

}

{

index:108,

ViewName : "FMSV_PAYMENTS_TO_ACS",

MigQuery:"SELECT 
    FPH.PA_REFID,
    FPH.TOTAL_AMOUNT, 
    FPD.INST_PA_REFID, 
    FPH.PAYMENT_TYPE,
    -- PAYMENT_TYPE_DESC calculation might need a join or a case statement depending on how it's stored in SQL Server
    (FPD.DUE_AMOUNT - ISNULL(FCD.PAID_AMOUNT, 0)) AS DUE_AMOUNT, 
    FORMAT(FPD.DUE_DATE, 'dd/MM/yyyy') AS DUE_DATE,
    FPD.GST_APPLICABLE, 
    FPD.GST_PERCENT, 
    FPD.GST_AMOUNT,
    FRD.RS_NAME, 
    UPPER(FRD.RS_ID_NUMBER) AS RS_ID_NUMBER, 
    FRD.RS_ID_TYPE,
    FRD.RS_EMP_NAME AS ORGANIZATION_NAME,
    FRD.RS_EMAIL,
    FRD.RS_MOBILE_NUMBER,
    FRD.RS_BANK_CODE,
    FRD.RS_BANK_ACCOUNT_NUMBER,
    FBD.BOND_ID,
    FRD1.RS_NAME AS ACC_NAME, 
    UPPER(FRD1.RS_ID_NUMBER) AS ACC_ID_NUMBER, 
    FRD1.RS_ID_TYPE AS ACC_ID_TYPE,
    CASE 
        WHEN FCD.CASE_NO IS NOT NULL THEN FCD.CASE_NO
        ELSE FCD.CASE_ID 
    END AS CASE_ID,
    FCD.COURT_NUMBER, 
    FCD.CHARGE_DETAILS, 
    ISNULL(FCD.SOURCE_SYSTEM, ISNULL(FPD.SOURCE_SYSTEM, 'FMS')) AS SOURCE_SYSTEM,
    -- COURT_NUMBER_DESC calculation might need a join or a case statement depending on how it's stored in SQL Server
    FAD.ADDRESS_TYPE, 
    FAD.BLOCK_NO, 
    FAD.STREET_NAME, 
    FAD.FLOOR_NO, 
    FAD.UNIT_NO, 
    FAD.BUILDING_NAME,
    FAD.CITY_NAME, 
    FAD.STATE_NAME, 
    FAD.COUNTRY_NAME, 
    FAD.POSTAL_CODE, 
    ISNULL(FPH.INS_AMEND_REQUEST, 'N') AS INS_AMEND_REQUEST
FROM 
    FMS_PA_HEADER FPH
    INNER JOIN FMS_PA_DETAILS FPD ON FPH.PA_REFID = FPD.PA_REFID AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
    INNER JOIN FMS_PA_RESPONDENTS FPR ON FPR.PA_REFID = FPH.PA_REFID AND ISNULL(FPR.IS_DEFAULT_PAYER, 'N') = 'Y'
    INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FPR.RS_REFID = FRD.RS_REFID
    INNER JOIN FMS_ADDRESS_DETAILS FAD ON FAD.RS_REFID = FRD.RS_REFID AND FAD.ADDRESS_TYPE IN ('SELF', 'BLR')
    LEFT JOIN FMS_PA_RESPONDENTS FPR1 ON FPR1.PA_REFID = FPH.PA_REFID AND FPR1.RS_TYPE = 'ACC'
    LEFT JOIN FMS_RESPONDENTS_DETAILS FRD1 ON FRD1.RS_REFID = FPR1.RS_REFID
    LEFT JOIN FMS_CASE_DETAILS FCD ON FCD.CASE_REFID = FPH.CASE_REFID
    LEFT JOIN FMS_BAILBOND_DETAILS FBD ON FBD.PA_REFID = FPD.PA_REFID
    LEFT JOIN FMSV_COLLECTION_DETAILS_EDC FCD ON FCD.INST_PA_REFID = FPD.INST_PA_REFID
WHERE 
    ISNULL(FPH.STATUS, 'A') NOT IN ('I', 'D') 
    AND ISNULL(FPH.TERMINATION_STATUS, 'N') != 'Y'
    AND (FPD.DUE_AMOUNT - ISNULL(FCD.PAID_AMOUNT, 0)) > 0 
    AND FPD.INST_PA_REFID NOT IN (
        SELECT INST_PA_REFID 
        FROM FMSV_COLLECTION_DETAILS_EDC FCD1 
        WHERE FCD1.INST_PA_REFID = FPD.INST_PA_REFID
        AND FCD1.PAID_AMOUNT = FPD.DUE_AMOUNT 
        AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
    )
ORDER BY 
    FPH.PA_REFID, 
    FPD.INST_PA_REFID ASC;"

}

{

index:109,

ViewName : "FMSV_PAYMENTS_TO_ACS_ACK",

MigQuery:"SELECT 
    FPH.PA_REFID,
    FPH.TOTAL_AMOUNT, 
    FPD.INST_PA_REFID, 
    FPH.PAYMENT_TYPE,
    -- Conversion needed if PAYMENT_TYPE_DESC is required; might involve a CASE statement or a lookup table
    (FPD.DUE_AMOUNT - ISNULL(FCD.PAID_AMOUNT, 0)) AS DUE_AMOUNT, 
    FORMAT(FPD.DUE_DATE, 'dd/MM/yyyy') AS DUE_DATE,
    FPD.GST_APPLICABLE, 
    FPD.GST_PERCENT, 
    FPD.GST_AMOUNT,
    FRD.RS_NAME, 
    UPPER(FRD.RS_ID_NUMBER) AS RS_ID_NUMBER, 
    FRD.RS_ID_TYPE,
    FRD.RS_EMP_NAME AS ORGANIZATION_NAME,
    FRD.RS_EMAIL,
    FRD.RS_MOBILE_NUMBER,
    FRD.RS_BANK_CODE,
    FRD.RS_BANK_ACCOUNT_NUMBER,
    FBD.BOND_ID,
    FRD1.RS_NAME AS ACC_NAME, 
    UPPER(FRD1.RS_ID_NUMBER) AS ACC_ID_NUMBER, 
    FRD1.RS_ID_TYPE AS ACC_ID_TYPE,
    CASE 
        WHEN FCD.CASE_NO IS NOT NULL THEN FCD.CASE_NO
        ELSE FCD.CASE_ID 
    END AS CASE_ID,
    FCD.COURT_NUMBER, 
    FCD.CHARGE_DETAILS, 
    ISNULL(FCD.SOURCE_SYSTEM, ISNULL(FPD.SOURCE_SYSTEM, 'FMS')) AS SOURCE_SYSTEM,
    FAD.ADDRESS_TYPE, 
    FAD.BLOCK_NO, 
    FAD.STREET_NAME, 
    FAD.FLOOR_NO, 
    FAD.UNIT_NO, 
    FAD.BUILDING_NAME,
    FAD.CITY_NAME, 
    FAD.STATE_NAME, 
    FAD.COUNTRY_NAME, 
    FAD.POSTAL_CODE
FROM 
    FMS_PA_HEADER FPH
    INNER JOIN FMS_PA_DETAILS FPD ON FPH.PA_REFID = FPD.PA_REFID AND ISNULL(FPD.IS_ACTIVE, 'Y') = 'Y'
    INNER JOIN FMS_PA_RESPONDENTS FPR ON FPR.PA_REFID = FPH.PA_REFID AND ISNULL(FPR.IS_DEFAULT_PAYER, 'N') = 'Y'
    INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FPR.RS_REFID = FRD.RS_REFID
    INNER JOIN FMS_ADDRESS_DETAILS FAD ON FAD.RS_REFID = FRD.RS_REFID AND FAD.ADDRESS_TYPE IN ('SELF', 'BLR')
    LEFT JOIN FMS_PA_RESPONDENTS FPR1 ON FPR1.PA_REFID = FPH.PA_REFID AND FPR1.RS_TYPE = 'ACC'
    LEFT JOIN FMS_RESPONDENTS_DETAILS FRD1 ON FRD1.RS_REFID = FPR1.RS_REFID
    LEFT JOIN FMS_CASE_DETAILS FCD ON FCD.CASE_REFID = FPH.CASE_REFID
    LEFT JOIN FMS_BAILBOND_DETAILS FBD ON FBD.PA_REFID = FPD.PA_REFID
    LEFT JOIN FMSV_COLLECTION_DETAILS_EDC FCD ON FCD.INST_PA_REFID = FPD.INST_PA_REFID
WHERE 
    ISNULL(FPH.STATUS, 'A') NOT IN ('I', 'D') 
    AND ISNULL(FPH.TERMINATION_STATUS, 'N') != 'Y'
ORDER BY 
    FPH.PA_REFID, 
    FPD.INST_PA_REFID ASC;"

}

{

index:110,

ViewName : "FMSV_PO_DASHBOARD",

MigQuery:"SELECT 
    POH.PO_REFID AS PO_REFID,
    POH.VENDOR_ID AS VENDOR_ID,
    POH.VENDOR_NAME AS VENDOR_NAME,
    POH.PO_NUMBER AS PO_NUMBER,
    POH.PO_DATE AS PO_DATE,
    POH.OFFICER_NAME AS OFFICER_NAME,
    POH.OFFICER_DEPARTMENT AS OFFICER_DEPARTMENT,
    POH.TOTAL_AMOUNT AS TOTAL_AMOUNT,
    0.0 AS PAID_AMOUNT,
    SUM(ISNULL(PVL.AMOUNT, 0.0)) AS OUTSTANDING_AMOUNT,
    POH.TOTAL_AMOUNT - SUM(ISNULL(PVL.AMOUNT, 0.0)) AS BALANCE_AMOUNT,
    POH.CREATED_DATE AS CREATED_DATE
FROM 
    FMS_PO_HEADER POH
    LEFT OUTER JOIN FMS_PV_HEADER PVH ON POH.PO_NUMBER = PVH.PO_NUMBER
    LEFT OUTER JOIN FMS_PV_LINE_DETAILS PVL ON PVH.PAYMENT_REFERENCE = PVL.PAYMENT_REFERENCE
GROUP BY 
    POH.PO_REFID,
    POH.VENDOR_ID,
    POH.VENDOR_NAME,
    POH.PO_NUMBER,
    POH.PO_DATE,
    POH.OFFICER_NAME,
    POH.OFFICER_DEPARTMENT,
    POH.TOTAL_AMOUNT,
    POH.CREATED_DATE;"

}

{

index:111,

ViewName : "FMSV_PROCESS_OTHER_PAYMENTS",

MigQuery:"SELECT 
    A.PA_REFID AS PA_REFID, 
    PAYMENT_TYPE, 
    BILLING_TYPE,
    D.RS_NAME AS RS_NAME, 
    D.RS_EMP_NAME AS ORGANIZATION_NAME,
    D.RS_VEHICLE_NUMBER AS RS_VEHICLE_NUMBER, 
    RS_IU_NUMBER,
    B.DUE_AMOUNT AS DUE_AMOUNT, 
    B.DUE_DATE AS DUE_DATE, 
    ISNULL(RECIEPT_NUMBER, 'PENDING') AS STATUS,
    COLLECTION_DATE, 
    A.STATUS AS RECORD_STATUS, 
    A.CREATED_BY AS OIC_NAME, 
    A.CREATED_DATE
FROM 
    FMS_PA_HEADER A
    INNER JOIN FMS_PA_DETAILS B ON A.PA_REFID = B.PA_REFID
    INNER JOIN FMS_PA_RESPONDENTS C ON C.PA_REFID = B.PA_REFID
    INNER JOIN FMS_RESPONDENTS_DETAILS D ON C.RS_REFID = D.RS_REFID
    LEFT OUTER JOIN FMSV_COLLECTION_HEADER E ON E.INST_PA_REFID = B.INST_PA_REFID
WHERE 
    A.PAYMENT_TYPE IN ('CP', 'RU') 
    AND STATUS NOT IN ('I') 
    AND COLLECTION_DATE IS NULL;"

}

{

index:112,

ViewName : "FMSV_PS_DASHBOARD",

MigQuery: "SELECT 
    A.PAYMENT_REFERENCE,
    A.PAYMENT_TYPE,
    A.VENDOR_ID,
    A.VENDOR_NAME,
    A.INVOICE_NUMBER,
    A.INVOICE_DATE,
    A.DATE_RECEIVED,
    A.STATUS,
    B.AMOUNT,
    B.COST_CENTER,
    B.ACCOUNT_NUMBER,
    B.SUBACCOUNT_NUMBER,
    A.CERTIFYING_OFFICER,
    A.CONSOLIDATED,
    C.USER_ID AS PROCESS_OFFICER,
    A.CREATED_BY,
    ISNULL(D.ACTION_CODE, 'PSUB') AS WF_STATUS, -- NVL converted to ISNULL
    SUBMISSION_OFFICER, 
    SUBMISSION_DATE
FROM 
    FMS_PV_HEADER A
    INNER JOIN FMSV_PV_LINE_DETAILS B ON A.PAYMENT_REFERENCE = B.PAYMENT_REFERENCE
    LEFT OUTER JOIN FMSV_FD_LAST_ACTIVITY D ON D.FMS_REFERENCE = A.PAYMENT_REFERENCE
    LEFT OUTER JOIN FMS_WORKFLOW_ACTIVITIES C ON C.FMS_REFERENCE = A.PAYMENT_REFERENCE AND C.END_DATE IS NULL
    LEFT OUTER JOIN FMSV_WF_SUBMISSION_DETAILS E ON E.FMS_REFERENCE = A.PAYMENT_REFERENCE
WHERE 
    B.AMOUNT != 0
    AND A.STATUS NOT IN ('RSUB', 'CLS', 'I');
"

}

{

index:113,

ViewName : "FMSV_PV_LINE_DETAILS",

MigQuery:"SELECT 
    PAYMENT_REFERENCE, 
    SUM(AMOUNT) AS AMOUNT,
    MIN(COST_CENTER) AS COST_CENTER, 
    MIN(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER,
    MIN(SUBACCOUNT_NUMBER) AS SUBACCOUNT_NUMBER
FROM 
    FMS_PV_LINE_DETAILS
WHERE 
    AMOUNT != 0
GROUP BY 
    PAYMENT_REFERENCE;"

}

{

index:114,

ViewName : "FMSV_PV_LINE_DETAILS_CBRF",

MigQuery:"SELECT 
    PAYMENT_REFERENCE AS PA_REFID,
    AMOUNT AS RF_AMOUNT
FROM 
    FMS_PV_LINE_DETAILS
WHERE 
    PAYMENT_TYPE = 'Refund'
    AND PAYMENT_REFERENCE IN (
        SELECT PAYMENT_REFERENCE 
        FROM FMS_PV_HEADER 
        WHERE PAYMENT_TYPE = 'CBRF'
    );"

}

{

index:115,

ViewName : "FMSV_RECEIPT_BALANCE_AMOUNT",

MigQuery:"SELECT 
    A.COL_REFID,
    A.RECIEPT_NUMBER,
    (B.PAID_AMOUNT - ISNULL(C.TOTAL_TRANSACTION_AMOUNT, 0) - ISNULL(D.TOTAL_FORFEIT, 0) - ISNULL(D.TOTAL_OFFSET, 0)) AS BALANCE_AMOUNT
FROM 
    FMS_COLLECTION_HEADER A
    INNER JOIN FMSV_RECEIPT_COLLECTION_AMOUNT B ON A.COL_REFID = B.COL_REFID
    LEFT OUTER JOIN FMSV_RECEIPT_REFUND_AMOUNT C ON A.COL_REFID = C.COL_REFID
    LEFT OUTER JOIN FMSV_REFUND_ORDER_SUMMARY D ON A.RECIEPT_NUMBER = D.RECEIPT_NUMBER;"

}

{

index:116,

ViewName : "FMSV_RECEIPT_COLLECTION_AMOUNT",

MigQuery:"SELECT 
    COL_REFID,
    SUM(PAYMENT_AMOUNT) AS PAID_AMOUNT
FROM 
    FMS_COLLECTION_DETAILS
WHERE 
    ISNULL(IS_FAILED, 'N') != 'Y'
GROUP BY 
    COL_REFID;"

}

{

index:117,

ViewName : "FMSV_RECEIPT_REFUND_AMOUNT",

MigQuery:"SELECT 
    COL_REFID,
    SUM(TRANSACTION_AMOUNT) AS TOTAL_TRANSACTION_AMOUNT 
FROM 
    FMS_COLLECTION_PAYMENTS 
GROUP BY 
    COL_REFID;
"

}

{

index:118,

ViewName : "FMSV_RECON_COLLECTION_DETAILS",

MigQuery:"SELECT 
    FPA.PA_REFID, 
    FPA.PAYMENT_TYPE, 
    FCH.RECEIPT_NUMBER, -- Note the spelling correction from RECIEPT_NUMBER to RECEIPT_NUMBER
    FCD.LINE_ID, 
    FCD.PAYMENT_MODE, 
    FCD.PAYMENT_AMOUNT,
    FCH.CREATED_BY AS CASHIER, 
    FCH.CREATED_DATE AS TRANSACTION_DATETIME,
    ISNULL(FCH.IS_VOID, 'N') AS IS_VOID -- NVL converted to ISNULL
FROM 
    FMS_PA_HEADER FPA 
    INNER JOIN FMS_COLLECTION_HEADER FCH ON FPA.PA_REFID = FCH.PA_REFID
    INNER JOIN FMS_COLLECTION_DETAILS FCD ON FCH.COL_REFID = FCD.COL_REFID;"

}

{

index:119,

ViewName : "FMSV_RECON_RECEIPT_DETAILS_1",

MigQuery:"SELECT FPH.PA_REFID, FPH.PAYMENT_TYPE, FCH.RECIEPT_NUMBER, FCD.PAID_AMOUNT AS TRANSACTION_AMOUNT , FCH.CREATED_DATE AS TRANSACTION_DATETIME,

NVL(FPD.SOURCE_SYSTEM,'FMS') AS SOURCE_SYSTEM

FROM FMS_PA_HEADER FPH

INNER JOIN FMS_PA_DETAILS FPD ON FPH.PA_REFID = FPD.PA_REFID

INNER JOIN FMS_COLLECTION_HEADER FCH ON FPH.PA_REFID = FCH.PA_REFID

INNER JOIN FMSV_COLLECTIONS_4CJTS_RECON_1 FCD ON FCH.COL_REFID = FCD.COL_REFID"

}

{

index:120,

ViewName : "FMSV_RECON_RECEIPT_DETAILS_2",

MigQuery:"SELECT 
    SCH.CLAIMANT_NAME, 
    SCH.NO_OF_PEOPLE AS TOT_PEOPLE, 
    SCH.PAYMENT_TYPE, 
    SCH.SC_REFID AS PAYMENT_REFERENCE, 
    SCH.DATE_OF_EVENT,
    PVH.CREATED_BY,
    SCH.PURPOSE_OF_THE_EVENT, 
    SCH.CATEGORY, 
    SCH.ORGANIZER, 
    SCH.REMARKS AS SC_REMARKS, 
    SCH.CLAIMED_AMOUNT AS TOT_AMOUNT, 
    SCH.DATE_OF_CLAIM,
    PVH.REMARKS,  
    PVH.VENDOR_NAME, 
    PVH.INVOICE_NUMBER, 
    PVH.INVOICE_DATE, 
    PVH.OIC_NAME, 
    PVH.NFS_VOUCHER_NUMBER, 
    PVH.VITAL_SUBMISSION_DATE,
    SCL.ACCOUNT_NO,
    SCL.SUBACCOUNT_NO,
    SCL.COST_CENTER, 
    SCL.NO_OF_PEOPLE, 
    SCL.AMOUNT  
FROM 
    FMS_SC_HEADER SCH        
    INNER JOIN FMS_PV_HEADER PVH ON SCH.SC_REFID = PVH.PAYMENT_REFERENCE
    INNER JOIN FMS_SC_LINE_DETAILS SCL ON SCH.SC_REFID = SCL.SC_REFID
WHERE 
    SCH.PAYMENT_TYPE = 'RF';"

}

{

index:121,

ViewName : "FMSV_REFRESHMENT_REPORT",

MigQuery:"SELECT  SCH.CLAIMANT_NAME, SCH.NO_OF_PEOPLE TOT_PEOPLE, SCH.PAYMENT_TYPE, SCH.SC_REFID AS PAYMENT_REFERENCE, SCH.DATE_OF_EVENT,PVH.CREATED_BY,

SCH.PURPOSE_OF_THE_EVENT, SCH.CATEGORY, SCH.ORGANIZER, SCH.REMARKS AS SC_REMARKS, SCH.CLAIMED_AMOUNT AS TOT_AMOUNT, SCH.DATE_OF_CLAIM,

PVH.REMARKS AS REMARKS,  PVH.VENDOR_NAME, PVH.INVOICE_NUMBER, PVH.INVOICE_DATE, PVH.OIC_NAME, PVH.NFS_VOUCHER_NUMBER, PVH.VITAL_SUBMISSION_DATE,

SCL.ACCOUNT_NO,SCL.SUBACCOUNT_NO,SCL.COST_CENTER, SCL.NO_OF_PEOPLE, SCL.AMOUNT  FROM FMS_SC_HEADER SCH        

INNER JOIN FMS_PV_HEADER PVH ON SCH.SC_REFID=PVH.PAYMENT_REFERENCE

INNER JOIN FMS_SC_LINE_DETAILS SCL ON SCH.SC_REFID=SCL.SC_REFID

WHERE SCH.PAYMENT_TYPE = 'RF'"

}

{

index:122,

ViewName : "FMSV_REFUND_ORDER_SUMMARY",

MigQuery:"SELECT RECEIPT_NUMBER,

    SUM(OFFSET_AMOUNT)  AS TOTAL_OFFSET,

    SUM(FORFEIT_AMOUNT) AS TOTAL_FORFEIT,

    SUM(REFUND_AMOUNT)  AS TOTAL_REFUND

  FROM FMS_REFUND_ORDER_DETAILS

  WHERE NVL(ACTIVE_INDICATOR,'Y')='Y'

  GROUP BY RECEIPT_NUMBER"

}

{

index:123,

ViewName : "FMSV_REVENUE_REFUNDS_ENQUIRY",

MigQuery:"SELECT A.PAYMENT_REFERENCE, A.PAYMENT_TYPE, A.VENDOR_ID, A.VENDOR_NAME, A.INVOICE_NUMBER, A.INVOICE_DATE, A.DATE_RECIEVED,

	--A.STATUS,

	CASE

	WHEN NVL(F.RF_AMOUNT,0) != 0

	THEN F.RF_AMOUNT

	ELSE B.AMOUNT

	END AS AMOUNT,

	B.COST_CENTER, B.ACCOUNT_NUMBER, B.SUBACCOUNT_NUMBER, A.CERTIFYING_OFFICER, C.USER_ID AS PROCESS_OFFICER, C.ROLE_ID AS CURRENT_ROLE,

	A.CREATED_BY, A.NFS_VOUCHER_NUMBER, A.NFS_PAID_DATE, A.VITAL_SUBMISSION_DATE, 

	CASE

	WHEN A.STATUS IN ('APP','CLS','RSUB','DEL')

	THEN A.STATUS

	ELSE NVL(D.ACTION_CODE,'PSUB')

	END AS WF_STATUS,

	NVL(D.ACTION_CODE,'PSUB') AS STATUS,

	D.ROLE_ID, D.ROLE_DESCRIPTION, E.SUBMISSION_OFFICER, E.SUBMISSION_DATE, A.CASE_NUMBER

FROM FMS_PV_HEADER A

INNER JOIN FMSV_PV_LINE_DETAILS B ON A.PAYMENT_REFERENCE = B.PAYMENT_REFERENCE

LEFT OUTER JOIN FMSV_FD_LAST_ACTIVITY_DETAILS D ON D.FMS_REFERENCE = A.PAYMENT_REFERENCE

LEFT OUTER JOIN FMS_WORKFLOW_ACTIVITIES C ON C.FMS_REFERENCE = A.PAYMENT_REFERENCE AND C.END_DATE IS NULL

LEFT OUTER JOIN FMSV_WF_SUBMISSION_DETAILS E ON E.FMS_REFERENCE = A.PAYMENT_REFERENCE

LEFT OUTER JOIN FMSV_PV_LINE_DETAILS_CBRF F ON F.PA_REFID = A.PAYMENT_REFERENCE

WHERE A.STATUS NOT IN ('I','DEL')"

}

{

index:124,

ViewName : "FMSV_SA_DASHBOARD",

MigQuery:"SELECT FSAD.PAYER_REF_ID AS PAY_RS_REFID, FSAD.RECIEVER_REF_ID AS REC_RS_REFID, FSAD.SA_REFERENCE AS REFNUM,

  FSAD.SUBCOURT_ACCOUNT_NUMBER AS ACCNUM, FSAD.INTERNAL_ACCOUNT_NUMBER AS IACCNUM,

FSAD.CREATE_DATE AS CREATEDATE, FRD.RS_NAME AS PAYERNAME, FRD.RS_ID_NUMBER AS PAYERID,

FRDR.RS_NAME AS RECNAME, FRDR.RS_ID_NUMBER AS RECID,

 

(SELECT SUM(AMOUNT) AS COLL_TOTAL FROM FMS_SA_TRANSACTION_DETAILS A

WHERE TRANSACTION_TYPE='C'  AND A.SA_REFERENCE = FSAD.SA_REFERENCE ) AS COLL_TOTAL,

 

(SELECT SUM(AMOUNT) AS PAYER_TOTAL FROM FMS_SA_TRANSACTION_DETAILS B

WHERE TRANSACTION_TYPE='P'  AND B.SA_REFERENCE = FSAD.SA_REFERENCE ) AS PAYER_TOTAL

 

 FROM FMS_SUSPENSE_ACCOUNT_DETAILS FSAD

INNER JOIN FMS_RESPONDENTS_DETAILS FRD ON FSAD.PAYER_REF_ID = FRD.RS_REFID

INNER JOIN FMS_RESPONDENTS_DETAILS FRDR ON FRDR.RS_REFID = FSAD.RECIEVER_REF_ID"

}

{

index:125,

ViewName : "FMSV_SC_DASHBOARD",

MigQuery:"SELECT SC_REFID, CLAIMANT_ID, CLAIMANT_NAME, DATE_OF_CLAIM, ORGANIZER,

    CATEGORY,  CLAIMED_AMOUNT, STATUS, FORM_TYPE, C.USER_ID AS PROCESS_OFFICER,

    A.CREATED_BY  AS SUBMISSION_OFFICER,  D.ACTION_CODE AS LAST_ACTION

  FROM FMS_SC_HEADER A

  LEFT OUTER JOIN FMSV_FD_LAST_ACTIVITY D

  ON D.FMS_REFERENCE = A.SC_REFID

  LEFT OUTER JOIN FMS_WORKFLOW_ACTIVITIES C

  ON C.FMS_REFERENCE = A.SC_REFID

  AND C.END_DATE IS NULL

  WHERE A.STATUS NOT IN ('RSUB','CLS','I')"

}

{

index:126,

ViewName : "FMSV_SEARCH_ALLOWANCE",

MigQuery:"SELECT A.NC_REFID,

    A.ALLOWANCE_TYPE,

    A.DEPARTMENT,

    A.LOCATION,

    A.ACCRUAL_MONTH,

    A.ACCRUAL_YEAR,

    A.REMARKS,

    A.ALLOWANCE_FORM_TYPE,

    A.STAFF_TYPE,

    A.STATUS,

    E.SUBMISSION_OFFICER ,

    E.SUBMISSION_DATE,

    B.USER_ID AS PROCESS_OFFICER,

    CASE WHEN A.STATUS IN ('APP','CLS','RSUB') THEN A.STATUS ELSE NVL(D.ACTION_CODE,'PSUB') END AS WF_STATUS

  FROM FMS_NCA_HEADER A

  LEFT OUTER JOIN FMSV_FD_LAST_ACTIVITY D 

  ON D.FMS_REFERENCE = A.NC_REFID

  LEFT OUTER JOIN FMS_WORKFLOW_ACTIVITIES B

  ON B.FMS_REFERENCE = A.NC_REFID AND B.END_DATE IS NULL 

  LEFT OUTER JOIN FMSV_WF_SUBMISSION_DETAILS E

  ON E.FMS_REFERENCE = A.NC_REFID"

}

{

index:127,

ViewName : "FMSV_STAFF_PEND_ALLNS_DETAILS",

MigQuery:"SELECT DISTINCT A.SUBMISSION_ID AS SUBMISSION_ID,

    A.CREATED_DATE                AS CREATED_DATE,

    A.CREATED_BY                  AS CREATED_BY,

    A.FILE_NAME                   AS FILE_NAME,

    A.IS_VOID                     AS IS_VOID,

    B.REFID                       AS REFID

  FROM FMS_PEND_ALLOWANCE_TRACK A

  INNER JOIN FMS_PEND_ALLOWANCE_TRACK_DTLS B

  ON A.SUBMISSION_ID=B.SUBMISSION_ID

  WHERE IS_VOID     = 'N'"

}

{

index:128,

ViewName : "FMSV_TERMINATED_INSTALLMENTS",

MigQuery:"SELECT PA_REFID,

    RS_ID_NUMBER,

    RS_NAME,

    CASE_ID,

    COURT_NUMBER,

    DUE_DATE,

    DUE_AMOUNT,

    DATE_OF_ORDER,

    CO_ID,

    JO_ID,

    TOTAL_AMOUNT,

    OUTSTANDING_AMOUNT,

    STATUS,

    TERMINATION_DATE,

    UNTERMINATION_STATUS

  FROM FMSV_FINES_PA_ENQUIRY

  WHERE TERMINATION_STATUS='Y' AND DUE_AMOUNT>0.0

  AND (WARRANT_TYPE IS NULL OR NVL(WARRANT_STATUS,'C')='C')

  ORDER BY PA_REFID DESC"

}

{

index:129,

ViewName : FMSV_TRANSPORTATION_REPORT,

MigQuery:SELECT PVH.PAYMENT_REFERENCE, PVH.PAYMENT_TYPE, PVH.INVOICE_DATE, PVH.INVOICE_NUMBER, PVH.CERTIFICATION_DATE_CO, '' AS PAYMENT_CREDITED, '' AS MONTH, '' AS DUE_DATE, '' AS DATE_TOPUP,

 PVH.VITAL_PROCESSING_DATE,PVH.NFS_VOUCHER_NUMBER,

 PVL1.AMOUNT, PVL2.AMOUNT AS GST_AMOUNT, PVL.PAYMENT_TYPE AS PAYMENT_DESC FROM FMS_PV_HEADER PVH 

 INNER JOIN FMS_PV_LINE_DETAILS PVL ON PVH.PAYMENT_REFERENCE=PVL.PAYMENT_REFERENCE

 INNER JOIN FMSV_PV_LINE_DETAILS PVL1 ON PVH.PAYMENT_REFERENCE=PVL1.PAYMENT_REFERENCE

 INNER JOIN FMS_PV_LINE_DETAILS PVL2 ON PVH.PAYMENT_REFERENCE=PVL2.PAYMENT_REFERENCE AND PVL2.PAYMENT_TYPE = 'GST'

 WHERE PVL.AMOUNT >0 AND PVH.PAYMENT_TYPE = 'TC' AND  PVL.PAYMENT_TYPE != 'GST'

}

{

index:130,

ViewName : FMSV_UNPAID_PAS

,

MigQuery:SELECT MIN(FPD.INST_PA_REFID) AS INST_PA_REFID FROM FMS_PA_DETAILS FPD 

LEFT OUTER JOIN FMSV_COLLECTION_DETAILS FVCH ON FVCH.INST_PA_REFID=FPD.INST_PA_REFID 

WHERE NVL(FVCH.PAID_AMOUNT,0)<FPD.DUE_AMOUNT 

GROUP BY PA_REFID

}

}